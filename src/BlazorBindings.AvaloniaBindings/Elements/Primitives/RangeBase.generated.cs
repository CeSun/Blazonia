// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using ACP = Avalonia.Controls.Primitives;
using BlazorBindings.AvaloniaBindings.Elements;

#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements.Primitives
{
    /// <summary>
    /// Base class for controls that display a value within a range.
    /// </summary>
    public abstract partial class RangeBase : TemplatedControl
    {
        static RangeBase()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the large increment value added or subtracted from the <see cref="P:Avalonia.Controls.Primitives.RangeBase.Value" />.
        /// </summary>
        [Parameter] public double? LargeChange { get; set; }
        /// <summary>
        /// Gets or sets the maximum possible value.
        /// </summary>
        [Parameter] public double? Maximum { get; set; }
        /// <summary>
        /// Gets or sets the minimum possible value.
        /// </summary>
        [Parameter] public double? Minimum { get; set; }
        /// <summary>
        /// Gets or sets the small increment value added or subtracted from the <see cref="P:Avalonia.Controls.Primitives.RangeBase.Value" />.
        /// </summary>
        [Parameter] public double? SmallChange { get; set; }
        /// <summary>
        /// Gets or sets the current value.
        /// </summary>
        [Parameter] public double? Value { get; set; }
        [Parameter] public EventCallback<double?> ValueChanged { get; set; }

        public new ACP.RangeBase NativeControl => (ACP.RangeBase)((AvaloniaObject)this).NativeControl;


        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(LargeChange):
                    if (!Equals(LargeChange, value))
                    {
                        LargeChange = (double?)value;
                        NativeControl.LargeChange = LargeChange ?? (double)ACP.RangeBase.LargeChangeProperty.GetDefaultValue(ACP.RangeBase.LargeChangeProperty.OwnerType);
                    }
                    break;
                case nameof(Maximum):
                    if (!Equals(Maximum, value))
                    {
                        Maximum = (double?)value;
                        NativeControl.Maximum = Maximum ?? (double)ACP.RangeBase.MaximumProperty.GetDefaultValue(ACP.RangeBase.MaximumProperty.OwnerType);
                    }
                    break;
                case nameof(Minimum):
                    if (!Equals(Minimum, value))
                    {
                        Minimum = (double?)value;
                        NativeControl.Minimum = Minimum ?? (double)ACP.RangeBase.MinimumProperty.GetDefaultValue(ACP.RangeBase.MinimumProperty.OwnerType);
                    }
                    break;
                case nameof(SmallChange):
                    if (!Equals(SmallChange, value))
                    {
                        SmallChange = (double?)value;
                        NativeControl.SmallChange = SmallChange ?? (double)ACP.RangeBase.SmallChangeProperty.GetDefaultValue(ACP.RangeBase.SmallChangeProperty.OwnerType);
                    }
                    break;
                case nameof(Value):
                    if (!Equals(Value, value))
                    {
                        Value = (double?)value;
                        NativeControl.Value = Value ?? (double)ACP.RangeBase.ValueProperty.GetDefaultValue(ACP.RangeBase.ValueProperty.OwnerType);
                    }
                    break;
                case nameof(ValueChanged):
                    if (!Equals(ValueChanged, value))
                    {
                        void NativeControlValueChanged(object sender, ACP.RangeBaseValueChangedEventArgs e)
                        {
                            var value = NativeControl.Value is double item ? item : default(double?);
                            Value = value;
                            InvokeEventCallback(ValueChanged, value);
                        }

                        ValueChanged = (EventCallback<double?>)value;
                        NativeControl.ValueChanged -= NativeControlValueChanged;
                        NativeControl.ValueChanged += NativeControlValueChanged;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
