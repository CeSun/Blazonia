// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using ACP = Avalonia.Controls.Primitives;
using BlazorBindings.AvaloniaBindings.Elements;
using Microsoft.AspNetCore.Components.Rendering;

#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements.Primitives
{
    /// <summary>
    /// A lookless control whose visual appearance is defined by its <see cref="P:Avalonia.Controls.Primitives.TemplatedControl.Template" />.
    /// </summary>
    public partial class TemplatedControl : BlazorBindings.AvaloniaBindings.Elements.Control
    {
        static TemplatedControl()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the brush used to draw the control's background.
        /// </summary>
        [Parameter] public global::Avalonia.Media.IBrush Background { get; set; }
        /// <summary>
        /// Gets or sets the brush used to draw the control's border.
        /// </summary>
        [Parameter] public global::Avalonia.Media.IBrush BorderBrush { get; set; }
        /// <summary>
        /// Gets or sets the thickness of the control's border.
        /// </summary>
        [Parameter] public global::Avalonia.Thickness? BorderThickness { get; set; }
        /// <summary>
        /// Gets or sets the radius of the border rounded corners.
        /// </summary>
        [Parameter] public global::Avalonia.CornerRadius? CornerRadius { get; set; }
        /// <summary>
        /// Gets or sets the font family used to draw the control's text.
        /// </summary>
        [Parameter] public global::Avalonia.Media.FontFamily FontFamily { get; set; }
        /// <summary>
        /// Gets or sets the size of the control's text in points.
        /// </summary>
        [Parameter] public double? FontSize { get; set; }
        /// <summary>
        /// Gets or sets the font stretch used to draw the control's text.
        /// </summary>
        [Parameter] public global::Avalonia.Media.FontStretch? FontStretch { get; set; }
        /// <summary>
        /// Gets or sets the font style used to draw the control's text.
        /// </summary>
        [Parameter] public global::Avalonia.Media.FontStyle? FontStyle { get; set; }
        /// <summary>
        /// Gets or sets the font weight used to draw the control's text.
        /// </summary>
        [Parameter] public global::Avalonia.Media.FontWeight? FontWeight { get; set; }
        /// <summary>
        /// Gets or sets the brush used to draw the control's text and other foreground elements.
        /// </summary>
        [Parameter] public global::Avalonia.Media.IBrush Foreground { get; set; }
        /// <summary>
        /// Gets or sets the padding placed between the border of the control and its content.
        /// </summary>
        [Parameter] public global::Avalonia.Thickness? Padding { get; set; }
        /// <summary>
        /// Gets or sets the template that defines the control's appearance.
        /// </summary>
        [Parameter] public RenderFragment Template { get; set; }
        [Parameter] public EventCallback<ACP.TemplateAppliedEventArgs> OnTemplateApplied { get; set; }

        public new ACP.TemplatedControl NativeControl => (ACP.TemplatedControl)((AvaloniaObject)this).NativeControl;

        protected override ACP.TemplatedControl CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Background):
                    if (!Equals(Background, value))
                    {
                        Background = (global::Avalonia.Media.IBrush)value;
                        NativeControl.Background = Background;
                    }
                    break;
                case nameof(BorderBrush):
                    if (!Equals(BorderBrush, value))
                    {
                        BorderBrush = (global::Avalonia.Media.IBrush)value;
                        NativeControl.BorderBrush = BorderBrush;
                    }
                    break;
                case nameof(BorderThickness):
                    if (!Equals(BorderThickness, value))
                    {
                        BorderThickness = (global::Avalonia.Thickness?)value;
                        NativeControl.BorderThickness = BorderThickness ?? (global::Avalonia.Thickness)ACP.TemplatedControl.BorderThicknessProperty.GetDefaultValue(ACP.TemplatedControl.BorderThicknessProperty.OwnerType);
                    }
                    break;
                case nameof(CornerRadius):
                    if (!Equals(CornerRadius, value))
                    {
                        CornerRadius = (global::Avalonia.CornerRadius?)value;
                        NativeControl.CornerRadius = CornerRadius ?? (global::Avalonia.CornerRadius)ACP.TemplatedControl.CornerRadiusProperty.GetDefaultValue(ACP.TemplatedControl.CornerRadiusProperty.OwnerType);
                    }
                    break;
                case nameof(FontFamily):
                    if (!Equals(FontFamily, value))
                    {
                        FontFamily = (global::Avalonia.Media.FontFamily)value;
                        NativeControl.FontFamily = FontFamily;
                    }
                    break;
                case nameof(FontSize):
                    if (!Equals(FontSize, value))
                    {
                        FontSize = (double?)value;
                        NativeControl.FontSize = FontSize ?? (double)ACP.TemplatedControl.FontSizeProperty.GetDefaultValue(ACP.TemplatedControl.FontSizeProperty.OwnerType);
                    }
                    break;
                case nameof(FontStretch):
                    if (!Equals(FontStretch, value))
                    {
                        FontStretch = (global::Avalonia.Media.FontStretch?)value;
                        NativeControl.FontStretch = FontStretch ?? (global::Avalonia.Media.FontStretch)ACP.TemplatedControl.FontStretchProperty.GetDefaultValue(ACP.TemplatedControl.FontStretchProperty.OwnerType);
                    }
                    break;
                case nameof(FontStyle):
                    if (!Equals(FontStyle, value))
                    {
                        FontStyle = (global::Avalonia.Media.FontStyle?)value;
                        NativeControl.FontStyle = FontStyle ?? (global::Avalonia.Media.FontStyle)ACP.TemplatedControl.FontStyleProperty.GetDefaultValue(ACP.TemplatedControl.FontStyleProperty.OwnerType);
                    }
                    break;
                case nameof(FontWeight):
                    if (!Equals(FontWeight, value))
                    {
                        FontWeight = (global::Avalonia.Media.FontWeight?)value;
                        NativeControl.FontWeight = FontWeight ?? (global::Avalonia.Media.FontWeight)ACP.TemplatedControl.FontWeightProperty.GetDefaultValue(ACP.TemplatedControl.FontWeightProperty.OwnerType);
                    }
                    break;
                case nameof(Foreground):
                    if (!Equals(Foreground, value))
                    {
                        Foreground = (global::Avalonia.Media.IBrush)value;
                        NativeControl.Foreground = Foreground;
                    }
                    break;
                case nameof(Padding):
                    if (!Equals(Padding, value))
                    {
                        Padding = (global::Avalonia.Thickness?)value;
                        NativeControl.Padding = Padding ?? (global::Avalonia.Thickness)ACP.TemplatedControl.PaddingProperty.GetDefaultValue(ACP.TemplatedControl.PaddingProperty.OwnerType);
                    }
                    break;
                case nameof(Template):
                    Template = (RenderFragment)value;
                    break;
                case nameof(OnTemplateApplied):
                    if (!Equals(OnTemplateApplied, value))
                    {
                        void NativeControlTemplateApplied(object sender, ACP.TemplateAppliedEventArgs e) => InvokeEventCallback(OnTemplateApplied, e);

                        OnTemplateApplied = (EventCallback<ACP.TemplateAppliedEventArgs>)value;
                        NativeControl.TemplateApplied -= NativeControlTemplateApplied;
                        NativeControl.TemplateApplied += NativeControlTemplateApplied;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddControlTemplateProperty<ACP.TemplatedControl, Avalonia.Controls.Templates.IControlTemplate>(builder, sequence++, Template,
                (nativeControl, nativeTemplate) => nativeControl.Template = nativeTemplate);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
