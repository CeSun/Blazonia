// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>



#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements
{
    /// <summary>
    /// A control which scrolls its content if the content is bigger than the space available.
    /// </summary>
    public partial class ScrollViewer : ContentControl
    {
        static ScrollViewer()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets a value that indicates whether scrollbars can hide itself when user is not interacting with it.
        /// </summary>
        [Parameter] public bool? AllowAutoHide { get; set; }
        /// <summary>
        /// Gets or sets a value that determines whether the <see cref="T:Avalonia.Controls.ScrollViewer" /> uses a bring-into-view scroll behavior when an item in the view gets focus.
        /// </summary>
        /// <value>
        /// true to use a behavior that brings focused items into view. false to use a behavior that focused items do not automatically scroll into view. The default is true.
        /// </value>
        [Parameter] public bool? BringIntoViewOnFocusChange { get; set; }
        /// <summary>
        /// Gets or sets the horizontal scrollbar visibility.
        /// </summary>
        [Parameter] public AC.Primitives.ScrollBarVisibility? HorizontalScrollBarVisibility { get; set; }
        /// <summary>
        /// Gets or sets how the existing snap points are horizontally aligned versus the initial viewport.
        /// </summary>
        [Parameter] public AC.Primitives.SnapPointsAlignment? HorizontalSnapPointsAlignment { get; set; }
        /// <summary>
        /// Gets or sets how scroll gesture reacts to the snap points along the horizontal axis.
        /// </summary>
        [Parameter] public AC.Primitives.SnapPointsType? HorizontalSnapPointsType { get; set; }
        /// <summary>
        /// Gets or sets whether dragging of <see cref="T:Avalonia.Controls.Primitives.Thumb" /> elements should update the <see cref="T:Avalonia.Controls.ScrollViewer" /> only when the user releases the mouse.
        /// </summary>
        [Parameter] public bool? IsDeferredScrollingEnabled { get; set; }
        /// <summary>
        /// Gets or sets if scroll chaining is enabled. The default value is true.
        /// </summary>
        [Parameter] public bool? IsScrollChainingEnabled { get; set; }
        /// <summary>
        /// Gets or sets whether scroll gestures should include inertia in their behavior and value.
        /// </summary>
        [Parameter] public bool? IsScrollInertiaEnabled { get; set; }
        /// <summary>
        /// Gets or sets the current scroll offset.
        /// </summary>
        [Parameter] public global::Avalonia.Vector? Offset { get; set; }
        /// <summary>
        /// Gets or sets the vertical scrollbar visibility.
        /// </summary>
        [Parameter] public AC.Primitives.ScrollBarVisibility? VerticalScrollBarVisibility { get; set; }
        /// <summary>
        /// Gets or sets how the existing snap points are vertically aligned versus the initial viewport.
        /// </summary>
        [Parameter] public AC.Primitives.SnapPointsAlignment? VerticalSnapPointsAlignment { get; set; }
        /// <summary>
        /// Gets or sets how scroll gesture reacts to the snap points along the vertical axis.
        /// </summary>
        [Parameter] public AC.Primitives.SnapPointsType? VerticalSnapPointsType { get; set; }
        [Parameter] public EventCallback<AC.ScrollChangedEventArgs> OnScrollChanged { get; set; }

        public new AC.ScrollViewer NativeControl => (AC.ScrollViewer)((AvaloniaObject)this).NativeControl;

        protected override AC.ScrollViewer CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(AllowAutoHide):
                    if (!Equals(AllowAutoHide, value))
                    {
                        AllowAutoHide = (bool?)value;
                        NativeControl.AllowAutoHide = AllowAutoHide ?? (bool)AC.ScrollViewer.AllowAutoHideProperty.GetDefaultValue(AC.ScrollViewer.AllowAutoHideProperty.OwnerType);
                    }
                    break;
                case nameof(BringIntoViewOnFocusChange):
                    if (!Equals(BringIntoViewOnFocusChange, value))
                    {
                        BringIntoViewOnFocusChange = (bool?)value;
                        NativeControl.BringIntoViewOnFocusChange = BringIntoViewOnFocusChange ?? (bool)AC.ScrollViewer.BringIntoViewOnFocusChangeProperty.GetDefaultValue(AC.ScrollViewer.BringIntoViewOnFocusChangeProperty.OwnerType);
                    }
                    break;
                case nameof(HorizontalScrollBarVisibility):
                    if (!Equals(HorizontalScrollBarVisibility, value))
                    {
                        HorizontalScrollBarVisibility = (AC.Primitives.ScrollBarVisibility?)value;
                        NativeControl.HorizontalScrollBarVisibility = HorizontalScrollBarVisibility ?? (AC.Primitives.ScrollBarVisibility)AC.ScrollViewer.HorizontalScrollBarVisibilityProperty.GetDefaultValue(AC.ScrollViewer.HorizontalScrollBarVisibilityProperty.OwnerType);
                    }
                    break;
                case nameof(HorizontalSnapPointsAlignment):
                    if (!Equals(HorizontalSnapPointsAlignment, value))
                    {
                        HorizontalSnapPointsAlignment = (AC.Primitives.SnapPointsAlignment?)value;
                        NativeControl.HorizontalSnapPointsAlignment = HorizontalSnapPointsAlignment ?? (AC.Primitives.SnapPointsAlignment)AC.ScrollViewer.HorizontalSnapPointsAlignmentProperty.GetDefaultValue(AC.ScrollViewer.HorizontalSnapPointsAlignmentProperty.OwnerType);
                    }
                    break;
                case nameof(HorizontalSnapPointsType):
                    if (!Equals(HorizontalSnapPointsType, value))
                    {
                        HorizontalSnapPointsType = (AC.Primitives.SnapPointsType?)value;
                        NativeControl.HorizontalSnapPointsType = HorizontalSnapPointsType ?? (AC.Primitives.SnapPointsType)AC.ScrollViewer.HorizontalSnapPointsTypeProperty.GetDefaultValue(AC.ScrollViewer.HorizontalSnapPointsTypeProperty.OwnerType);
                    }
                    break;
                case nameof(IsDeferredScrollingEnabled):
                    if (!Equals(IsDeferredScrollingEnabled, value))
                    {
                        IsDeferredScrollingEnabled = (bool?)value;
                        NativeControl.IsDeferredScrollingEnabled = IsDeferredScrollingEnabled ?? (bool)AC.ScrollViewer.IsDeferredScrollingEnabledProperty.GetDefaultValue(AC.ScrollViewer.IsDeferredScrollingEnabledProperty.OwnerType);
                    }
                    break;
                case nameof(IsScrollChainingEnabled):
                    if (!Equals(IsScrollChainingEnabled, value))
                    {
                        IsScrollChainingEnabled = (bool?)value;
                        NativeControl.IsScrollChainingEnabled = IsScrollChainingEnabled ?? (bool)AC.ScrollViewer.IsScrollChainingEnabledProperty.GetDefaultValue(AC.ScrollViewer.IsScrollChainingEnabledProperty.OwnerType);
                    }
                    break;
                case nameof(IsScrollInertiaEnabled):
                    if (!Equals(IsScrollInertiaEnabled, value))
                    {
                        IsScrollInertiaEnabled = (bool?)value;
                        NativeControl.IsScrollInertiaEnabled = IsScrollInertiaEnabled ?? (bool)AC.ScrollViewer.IsScrollInertiaEnabledProperty.GetDefaultValue(AC.ScrollViewer.IsScrollInertiaEnabledProperty.OwnerType);
                    }
                    break;
                case nameof(Offset):
                    if (!Equals(Offset, value))
                    {
                        Offset = (global::Avalonia.Vector?)value;
                        NativeControl.Offset = Offset ?? (global::Avalonia.Vector)AC.ScrollViewer.OffsetProperty.GetDefaultValue(AC.ScrollViewer.OffsetProperty.OwnerType);
                    }
                    break;
                case nameof(VerticalScrollBarVisibility):
                    if (!Equals(VerticalScrollBarVisibility, value))
                    {
                        VerticalScrollBarVisibility = (AC.Primitives.ScrollBarVisibility?)value;
                        NativeControl.VerticalScrollBarVisibility = VerticalScrollBarVisibility ?? (AC.Primitives.ScrollBarVisibility)AC.ScrollViewer.VerticalScrollBarVisibilityProperty.GetDefaultValue(AC.ScrollViewer.VerticalScrollBarVisibilityProperty.OwnerType);
                    }
                    break;
                case nameof(VerticalSnapPointsAlignment):
                    if (!Equals(VerticalSnapPointsAlignment, value))
                    {
                        VerticalSnapPointsAlignment = (AC.Primitives.SnapPointsAlignment?)value;
                        NativeControl.VerticalSnapPointsAlignment = VerticalSnapPointsAlignment ?? (AC.Primitives.SnapPointsAlignment)AC.ScrollViewer.VerticalSnapPointsAlignmentProperty.GetDefaultValue(AC.ScrollViewer.VerticalSnapPointsAlignmentProperty.OwnerType);
                    }
                    break;
                case nameof(VerticalSnapPointsType):
                    if (!Equals(VerticalSnapPointsType, value))
                    {
                        VerticalSnapPointsType = (AC.Primitives.SnapPointsType?)value;
                        NativeControl.VerticalSnapPointsType = VerticalSnapPointsType ?? (AC.Primitives.SnapPointsType)AC.ScrollViewer.VerticalSnapPointsTypeProperty.GetDefaultValue(AC.ScrollViewer.VerticalSnapPointsTypeProperty.OwnerType);
                    }
                    break;
                case nameof(OnScrollChanged):
                    if (!Equals(OnScrollChanged, value))
                    {
                        void NativeControlScrollChanged(object sender, AC.ScrollChangedEventArgs e) => InvokeEventCallback(OnScrollChanged, e);

                        OnScrollChanged = (EventCallback<AC.ScrollChangedEventArgs>)value;
                        NativeControl.ScrollChanged -= NativeControlScrollChanged;
                        NativeControl.ScrollChanged += NativeControlScrollChanged;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
