@inherits ElementTestBase

@code {
    [Test]
    public async Task AddLayoutChildren()
    {
        var layout = await Render<MC.Layout>(
    @<VerticalStackLayout>
        <Label>First</Label>
        <Button>Second</Button>

        <HorizontalStackLayout>
            <Label>Third</Label>
        </HorizontalStackLayout>
    </VerticalStackLayout>
        );

        var label = (MC.Label)layout.Children[0];
        var button = (MC.Button)layout.Children[1];
        var innerLayout = (MC.Layout)layout.Children[2];
        var innerLabel = (MC.Label)innerLayout.Children[0];

        Assert.That(label.Text, Is.EqualTo("First"));
        Assert.That(button.Text, Is.EqualTo("Second"));
        Assert.That(innerLabel.Text, Is.EqualTo("Third"));
    }

    [Test]
    public async Task InsertAndRemoveItems()
    {
        var insertItems = false;

        var layout = await Render<MC.Layout>(
    @<VerticalStackLayout>
        @if (insertItems)
        {
            <Label>1</Label>
        }
        <Label>2</Label>
        @if (insertItems)
        {
            <Label>3</Label>
        }
        <Label>4</Label>
        @if (insertItems)
        {
            <Label>5</Label>
        }
        <Label>6</Label>
        @if (insertItems)
        {
            <Label>7</Label>
        }
    </VerticalStackLayout>
    );

        var items = layout.Children.Cast<MC.Label>().Select(l => l.Text).ToArray();
        Assert.That(items, Is.EqualTo(new[] { "2", "4", "6" }));

        insertItems = true;
        StateHasChanged();

        items = layout.Children.Cast<MC.Label>().Select(l => l.Text).ToArray();
        Assert.That(items, Is.EqualTo(new[] { "1", "2", "3", "4", "5", "6", "7" }));

        insertItems = false;
        StateHasChanged();

        items = layout.Children.Cast<MC.Label>().Select(l => l.Text).ToArray();
        Assert.That(items, Is.EqualTo(new[] { "2", "4", "6" }));
    }
}
