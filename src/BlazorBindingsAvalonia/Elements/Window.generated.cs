// <auto-generated>
//     This code was generated by a BlazorBindingsAvalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>



#pragma warning disable CA2252

namespace BlazorBindingsAvalonia.Elements
{
    /// <summary>
    /// A top-level window.
    /// </summary>
    public partial class Window : WindowBase
    {
        static Window()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Enables or disables resizing of the window.
        /// </summary>
        [Parameter] public bool? CanResize { get; set; }
        /// <summary>
        /// Gets or sets a value indicating how the <see cref="E:Avalonia.Controls.Window.Closing" /> event behaves in the presence of child windows.
        /// </summary>
        [Parameter] public AC.WindowClosingBehavior? ClosingBehavior { get; set; }
        /// <summary>
        /// Gets or Sets the <see cref="T:Avalonia.Platform.ExtendClientAreaChromeHints" /> that control how the chrome looks when the client area is extended.
        /// </summary>
        [Parameter] public global::Avalonia.Platform.ExtendClientAreaChromeHints? ExtendClientAreaChromeHints { get; set; }
        /// <summary>
        /// Gets or Sets the TitlebarHeightHint for when the client area is extended. A value of -1 will cause the titlebar to be auto sized to the OS default. Any other positive value will cause the titlebar to assume that height.
        /// </summary>
        [Parameter] public double? ExtendClientAreaTitleBarHeightHint { get; set; }
        /// <summary>
        /// Gets or sets if the ClientArea is Extended into the Window Decorations (chrome or border).
        /// </summary>
        [Parameter] public bool? ExtendClientAreaToDecorationsHint { get; set; }
        /// <summary>
        /// Gets or sets the icon of the window.
        /// </summary>
        [Parameter] public AC.WindowIcon Icon { get; set; }
        /// <summary>
        /// Gets or sets the window position in screen coordinates.
        /// </summary>
        [Parameter] public OneOf.OneOf<global::Avalonia.PixelPoint?, string> Position { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates whether a window is activated when first shown.
        /// </summary>
        [Parameter] public bool? ShowActivated { get; set; }
        /// <summary>
        /// Enables or disables the taskbar icon
        /// </summary>
        [Parameter] public bool? ShowInTaskbar { get; set; }
        /// <summary>
        /// Gets or sets a value indicating how the window will size itself to fit its content.
        /// </summary>
        [Parameter] public AC.SizeToContent? SizeToContent { get; set; }
        /// <summary>
        /// Sets the system decorations (title bar, border, etc)
        /// </summary>
        [Parameter] public AC.SystemDecorations? SystemDecorations { get; set; }
        /// <summary>
        /// Gets or sets the title of the window.
        /// </summary>
        [Parameter] public string Title { get; set; }
        /// <summary>
        /// Gets or sets the startup location of the window.
        /// </summary>
        [Parameter] public AC.WindowStartupLocation? WindowStartupLocation { get; set; }
        /// <summary>
        /// Gets or sets the minimized/maximized state of the window.
        /// </summary>
        [Parameter] public AC.WindowState? WindowState { get; set; }
        [Parameter] public EventCallback<AC.WindowClosingEventArgs> OnClosing { get; set; }

        public new AC.Window NativeControl => (AC.Window)((AvaloniaObject)this).NativeControl;

        protected override AC.Window CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(CanResize):
                    if (!Equals(CanResize, value))
                    {
                        CanResize = (bool?)value;
                        NativeControl.CanResize = CanResize ?? (bool)AC.Window.CanResizeProperty.GetDefaultValue(AC.Window.CanResizeProperty.OwnerType);
                    }
                    break;
                case nameof(ClosingBehavior):
                    if (!Equals(ClosingBehavior, value))
                    {
                        ClosingBehavior = (AC.WindowClosingBehavior?)value;
                        NativeControl.ClosingBehavior = ClosingBehavior ?? (AC.WindowClosingBehavior)AC.Window.ClosingBehaviorProperty.GetDefaultValue(AC.Window.ClosingBehaviorProperty.OwnerType);
                    }
                    break;
                case nameof(ExtendClientAreaChromeHints):
                    if (!Equals(ExtendClientAreaChromeHints, value))
                    {
                        ExtendClientAreaChromeHints = (global::Avalonia.Platform.ExtendClientAreaChromeHints?)value;
                        NativeControl.ExtendClientAreaChromeHints = ExtendClientAreaChromeHints ?? (global::Avalonia.Platform.ExtendClientAreaChromeHints)AC.Window.ExtendClientAreaChromeHintsProperty.GetDefaultValue(AC.Window.ExtendClientAreaChromeHintsProperty.OwnerType);
                    }
                    break;
                case nameof(ExtendClientAreaTitleBarHeightHint):
                    if (!Equals(ExtendClientAreaTitleBarHeightHint, value))
                    {
                        ExtendClientAreaTitleBarHeightHint = (double?)value;
                        NativeControl.ExtendClientAreaTitleBarHeightHint = ExtendClientAreaTitleBarHeightHint ?? (double)AC.Window.ExtendClientAreaTitleBarHeightHintProperty.GetDefaultValue(AC.Window.ExtendClientAreaTitleBarHeightHintProperty.OwnerType);
                    }
                    break;
                case nameof(ExtendClientAreaToDecorationsHint):
                    if (!Equals(ExtendClientAreaToDecorationsHint, value))
                    {
                        ExtendClientAreaToDecorationsHint = (bool?)value;
                        NativeControl.ExtendClientAreaToDecorationsHint = ExtendClientAreaToDecorationsHint ?? (bool)AC.Window.ExtendClientAreaToDecorationsHintProperty.GetDefaultValue(AC.Window.ExtendClientAreaToDecorationsHintProperty.OwnerType);
                    }
                    break;
                case nameof(Icon):
                    if (!Equals(Icon, value))
                    {
                        Icon = (AC.WindowIcon)value;
                        NativeControl.Icon = Icon;
                    }
                    break;
                case nameof(Position):
                    if (!Equals(Position, value))
                    {
                        Position = (OneOf.OneOf<global::Avalonia.PixelPoint?,string>)value;
                        if (Position.IsT0)
                        {
                            NativeControl.Position = (global::Avalonia.PixelPoint)Position.AsT0;
                        }
                        else 
                        {
                            NativeControl.Position = global::Avalonia.PixelPoint.Parse(Position.AsT1);
                        }
                    }
                    break;
                case nameof(ShowActivated):
                    if (!Equals(ShowActivated, value))
                    {
                        ShowActivated = (bool?)value;
                        NativeControl.ShowActivated = ShowActivated ?? (bool)AC.Window.ShowActivatedProperty.GetDefaultValue(AC.Window.ShowActivatedProperty.OwnerType);
                    }
                    break;
                case nameof(ShowInTaskbar):
                    if (!Equals(ShowInTaskbar, value))
                    {
                        ShowInTaskbar = (bool?)value;
                        NativeControl.ShowInTaskbar = ShowInTaskbar ?? (bool)AC.Window.ShowInTaskbarProperty.GetDefaultValue(AC.Window.ShowInTaskbarProperty.OwnerType);
                    }
                    break;
                case nameof(SizeToContent):
                    if (!Equals(SizeToContent, value))
                    {
                        SizeToContent = (AC.SizeToContent?)value;
                        NativeControl.SizeToContent = SizeToContent ?? (AC.SizeToContent)AC.Window.SizeToContentProperty.GetDefaultValue(AC.Window.SizeToContentProperty.OwnerType);
                    }
                    break;
                case nameof(SystemDecorations):
                    if (!Equals(SystemDecorations, value))
                    {
                        SystemDecorations = (AC.SystemDecorations?)value;
                        NativeControl.SystemDecorations = SystemDecorations ?? (AC.SystemDecorations)AC.Window.SystemDecorationsProperty.GetDefaultValue(AC.Window.SystemDecorationsProperty.OwnerType);
                    }
                    break;
                case nameof(Title):
                    if (!Equals(Title, value))
                    {
                        Title = (string)value;
                        NativeControl.Title = Title;
                    }
                    break;
                case nameof(WindowStartupLocation):
                    if (!Equals(WindowStartupLocation, value))
                    {
                        WindowStartupLocation = (AC.WindowStartupLocation?)value;
                        NativeControl.WindowStartupLocation = WindowStartupLocation ?? (AC.WindowStartupLocation)AC.Window.WindowStartupLocationProperty.GetDefaultValue(AC.Window.WindowStartupLocationProperty.OwnerType);
                    }
                    break;
                case nameof(WindowState):
                    if (!Equals(WindowState, value))
                    {
                        WindowState = (AC.WindowState?)value;
                        NativeControl.WindowState = WindowState ?? (AC.WindowState)AC.Window.WindowStateProperty.GetDefaultValue(AC.Window.WindowStateProperty.OwnerType);
                    }
                    break;
                case nameof(OnClosing):
                    if (!Equals(OnClosing, value))
                    {
                        void NativeControlClosing(object sender, AC.WindowClosingEventArgs e) => InvokeEventCallback(OnClosing, e);

                        OnClosing = (EventCallback<AC.WindowClosingEventArgs>)value;
                        NativeControl.Closing -= NativeControlClosing;
                        NativeControl.Closing += NativeControlClosing;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
