// <auto-generated>
//     This code was generated by a BlazorBindingsAvalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>



#pragma warning disable CA2252

namespace BlazorBindingsAvalonia.Elements
{
    /// <summary>
    /// Displays a <see cref="T:Avalonia.Media.Imaging.Bitmap" /> image.
    /// </summary>
    public partial class Image : Control
    {
        static Image()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the image that will be displayed.
        /// </summary>
        [Parameter] public global::Avalonia.Media.IImage Source { get; set; }
        /// <summary>
        /// Gets or sets a value controlling how the image will be stretched.
        /// </summary>
        [Parameter] public global::Avalonia.Media.Stretch? Stretch { get; set; }
        /// <summary>
        /// Gets or sets a value controlling in what direction the image will be stretched.
        /// </summary>
        [Parameter] public global::Avalonia.Media.StretchDirection? StretchDirection { get; set; }

        public new AC.Image NativeControl => (AC.Image)((AvaloniaObject)this).NativeControl;

        protected override AC.Image CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Source):
                    if (!Equals(Source, value))
                    {
                        Source = (global::Avalonia.Media.IImage)value;
                        NativeControl.Source = Source;
                    }
                    break;
                case nameof(Stretch):
                    if (!Equals(Stretch, value))
                    {
                        Stretch = (global::Avalonia.Media.Stretch?)value;
                        NativeControl.Stretch = Stretch ?? (global::Avalonia.Media.Stretch)AC.Image.StretchProperty.GetDefaultValue(AC.Image.StretchProperty.OwnerType);
                    }
                    break;
                case nameof(StretchDirection):
                    if (!Equals(StretchDirection, value))
                    {
                        StretchDirection = (global::Avalonia.Media.StretchDirection?)value;
                        NativeControl.StretchDirection = StretchDirection ?? (global::Avalonia.Media.StretchDirection)AC.Image.StretchDirectionProperty.GetDefaultValue(AC.Image.StretchDirectionProperty.OwnerType);
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
