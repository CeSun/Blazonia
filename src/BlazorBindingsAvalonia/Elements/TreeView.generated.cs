// <auto-generated>
//     This code was generated by a BlazorBindingsAvalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System.Collections;

#pragma warning disable CA2252

namespace BlazorBindingsAvalonia.Elements
{
    /// <summary>
    /// Displays a hierarchical tree of data.
    /// </summary>
    public partial class TreeView<T> : ItemsControl<T>
    {
        static TreeView()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value indicating whether to automatically scroll to newly selected items.
        /// </summary>
        [Parameter] public bool? AutoScrollToSelectedItem { get; set; }
        /// <summary>
        /// Gets or sets the selected item.
        /// </summary>
        [Parameter] public object SelectedItem { get; set; }
        /// <summary>
        /// Gets or sets the selected items.
        /// </summary>
        [Parameter] public IList SelectedItems { get; set; }
        /// <summary>
        /// Gets or sets the selection mode.
        /// </summary>
        [Parameter] public AC.SelectionMode? SelectionMode { get; set; }
        [Parameter] public EventCallback<AC.SelectionChangedEventArgs> OnSelectionChanged { get; set; }

        public new AC.TreeView NativeControl => (AC.TreeView)((AvaloniaObject)this).NativeControl;

        protected override AC.TreeView CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(AutoScrollToSelectedItem):
                    if (!Equals(AutoScrollToSelectedItem, value))
                    {
                        AutoScrollToSelectedItem = (bool?)value;
                        NativeControl.AutoScrollToSelectedItem = AutoScrollToSelectedItem ?? (bool)AC.TreeView.AutoScrollToSelectedItemProperty.GetDefaultValue(AC.TreeView.AutoScrollToSelectedItemProperty.OwnerType);
                    }
                    break;
                case nameof(SelectedItem):
                    if (!Equals(SelectedItem, value))
                    {
                        SelectedItem = (object)value;
                        NativeControl.SelectedItem = SelectedItem;
                    }
                    break;
                case nameof(SelectedItems):
                    if (!Equals(SelectedItems, value))
                    {
                        SelectedItems = (IList)value;
                        NativeControl.SelectedItems = SelectedItems;
                    }
                    break;
                case nameof(SelectionMode):
                    if (!Equals(SelectionMode, value))
                    {
                        SelectionMode = (AC.SelectionMode?)value;
                        NativeControl.SelectionMode = SelectionMode ?? (AC.SelectionMode)AC.TreeView.SelectionModeProperty.GetDefaultValue(AC.TreeView.SelectionModeProperty.OwnerType);
                    }
                    break;
                case nameof(OnSelectionChanged):
                    if (!Equals(OnSelectionChanged, value))
                    {
                        void NativeControlSelectionChanged(object sender, AC.SelectionChangedEventArgs e) => InvokeEventCallback(OnSelectionChanged, e);

                        OnSelectionChanged = (EventCallback<AC.SelectionChangedEventArgs>)value;
                        NativeControl.SelectionChanged -= NativeControlSelectionChanged;
                        NativeControl.SelectionChanged += NativeControlSelectionChanged;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
