// <auto-generated>
//     This code was generated by a BlazorBindingsAvalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>



#pragma warning disable CA2252

namespace BlazorBindingsAvalonia.Elements
{
    /// <summary>
    /// A control which decorates a child with a border and background.
    /// </summary>
    public partial class Border : Decorator
    {
        static Border()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a brush with which to paint the background.
        /// </summary>
        [Parameter] public OneOf.OneOf<global::Avalonia.Media.IBrush, string> Background { get; set; }
        /// <summary>
        /// Gets or sets how the background is drawn relative to the border.
        /// </summary>
        [Parameter] public global::Avalonia.Media.BackgroundSizing? BackgroundSizing { get; set; }
        /// <summary>
        /// Gets or sets a brush with which to paint the border.
        /// </summary>
        [Parameter] public OneOf.OneOf<global::Avalonia.Media.IBrush, string> BorderBrush { get; set; }
        /// <summary>
        /// Gets or sets the thickness of the border.
        /// </summary>
        [Parameter] public OneOf.OneOf<global::Avalonia.Thickness?, string> BorderThickness { get; set; }
        /// <summary>
        /// Gets or sets the box shadow effect parameters
        /// </summary>
        [Parameter] public OneOf.OneOf<global::Avalonia.Media.BoxShadows?, string> BoxShadow { get; set; }
        /// <summary>
        /// Gets or sets the radius of the border rounded corners.
        /// </summary>
        [Parameter] public OneOf.OneOf<global::Avalonia.CornerRadius?, string> CornerRadius { get; set; }

        public new AC.Border NativeControl => (AC.Border)((AvaloniaObject)this).NativeControl;

        protected override AC.Border CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Background):
                    if (!Equals(Background, value))
                    {
                        Background = (OneOf.OneOf<global::Avalonia.Media.IBrush,string>)value;
                        if (Background.IsT0)
                        {
                            NativeControl.Background = (global::Avalonia.Media.IBrush)Background.AsT0;
                        }
                        else 
                        {
                            NativeControl.Background = Avalonia.Media.Brush.Parse(Background.AsT1);
                        }
                    }
                    break;
                case nameof(BackgroundSizing):
                    if (!Equals(BackgroundSizing, value))
                    {
                        BackgroundSizing = (global::Avalonia.Media.BackgroundSizing?)value;
                        NativeControl.BackgroundSizing = BackgroundSizing ?? (global::Avalonia.Media.BackgroundSizing)AC.Border.BackgroundSizingProperty.GetDefaultValue(AC.Border.BackgroundSizingProperty.OwnerType);
                    }
                    break;
                case nameof(BorderBrush):
                    if (!Equals(BorderBrush, value))
                    {
                        BorderBrush = (OneOf.OneOf<global::Avalonia.Media.IBrush,string>)value;
                        if (BorderBrush.IsT0)
                        {
                            NativeControl.BorderBrush = (global::Avalonia.Media.IBrush)BorderBrush.AsT0;
                        }
                        else 
                        {
                            NativeControl.BorderBrush = Avalonia.Media.Brush.Parse(BorderBrush.AsT1);
                        }
                    }
                    break;
                case nameof(BorderThickness):
                    if (!Equals(BorderThickness, value))
                    {
                        BorderThickness = (OneOf.OneOf<global::Avalonia.Thickness?,string>)value;
                        if (BorderThickness.IsT0)
                        {
                            NativeControl.BorderThickness = (global::Avalonia.Thickness)BorderThickness.AsT0;
                        }
                        else 
                        {
                            NativeControl.BorderThickness = global::Avalonia.Thickness.Parse(BorderThickness.AsT1);
                        }
                    }
                    break;
                case nameof(BoxShadow):
                    if (!Equals(BoxShadow, value))
                    {
                        BoxShadow = (OneOf.OneOf<global::Avalonia.Media.BoxShadows?,string>)value;
                        if (BoxShadow.IsT0)
                        {
                            NativeControl.BoxShadow = (global::Avalonia.Media.BoxShadows)BoxShadow.AsT0;
                        }
                        else 
                        {
                            NativeControl.BoxShadow = global::Avalonia.Media.BoxShadows.Parse(BoxShadow.AsT1);
                        }
                    }
                    break;
                case nameof(CornerRadius):
                    if (!Equals(CornerRadius, value))
                    {
                        CornerRadius = (OneOf.OneOf<global::Avalonia.CornerRadius?,string>)value;
                        if (CornerRadius.IsT0)
                        {
                            NativeControl.CornerRadius = (global::Avalonia.CornerRadius)CornerRadius.AsT0;
                        }
                        else 
                        {
                            NativeControl.CornerRadius = global::Avalonia.CornerRadius.Parse(CornerRadius.AsT1);
                        }
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
