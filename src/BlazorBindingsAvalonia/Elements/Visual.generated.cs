// <auto-generated>
//     This code was generated by a BlazorBindingsAvalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using A = Avalonia;

#pragma warning disable CA2252

namespace BlazorBindingsAvalonia.Elements
{
    /// <summary>
    /// Base class for controls that provides rendering and related visual properties.
    /// </summary>
    public partial class Visual : StyledElement
    {
        static Visual()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the geometry clip for this visual.
        /// </summary>
        [Parameter] public OneOf.OneOf<A.Media.Geometry, string> Clip { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the control should be clipped to its bounds.
        /// </summary>
        [Parameter] public bool? ClipToBounds { get; set; }
        /// <summary>
        /// Gets or sets the effect of the control.
        /// </summary>
        [Parameter] public A.Media.IEffect Effect { get; set; }
        /// <summary>
        /// Gets or sets the text flow direction.
        /// </summary>
        [Parameter] public A.Media.FlowDirection? FlowDirection { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether this control is visible.
        /// </summary>
        [Parameter] public bool? IsVisible { get; set; }
        /// <summary>
        /// Gets or sets the opacity of the control.
        /// </summary>
        [Parameter] public double? Opacity { get; set; }
        /// <summary>
        /// Gets or sets the opacity mask of the control.
        /// </summary>
        [Parameter] public OneOf.OneOf<A.Media.IBrush, string> OpacityMask { get; set; }
        /// <summary>
        /// Gets or sets the render transform of the control.
        /// </summary>
        [Parameter] public A.Media.ITransform RenderTransform { get; set; }
        /// <summary>
        /// Gets or sets the transform origin of the control.
        /// </summary>
        [Parameter] public OneOf.OneOf<A.RelativePoint?, string> RenderTransformOrigin { get; set; }
        /// <summary>
        /// Gets or sets the Z index of the control.
        /// </summary>
        [Parameter] public int? ZIndex { get; set; }

        public new A.Visual NativeControl => (A.Visual)((AvaloniaObject)this).NativeControl;

        protected override A.Visual CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Clip):
                    if (!Equals(Clip, value))
                    {
                        Clip = (OneOf.OneOf<A.Media.Geometry,string>)value;
                        if (Clip.IsT0)
                        {
                            NativeControl.Clip = (A.Media.Geometry)Clip.AsT0;
                        }
                        else 
                        {
                            NativeControl.Clip = A.Media.Geometry.Parse(Clip.AsT1);
                        }
                    }
                    break;
                case nameof(ClipToBounds):
                    if (!Equals(ClipToBounds, value))
                    {
                        ClipToBounds = (bool?)value;
                        NativeControl.ClipToBounds = ClipToBounds ?? (bool)A.Visual.ClipToBoundsProperty.GetDefaultValue(A.Visual.ClipToBoundsProperty.OwnerType);
                    }
                    break;
                case nameof(Effect):
                    if (!Equals(Effect, value))
                    {
                        Effect = (A.Media.IEffect)value;
                        NativeControl.Effect = Effect;
                    }
                    break;
                case nameof(FlowDirection):
                    if (!Equals(FlowDirection, value))
                    {
                        FlowDirection = (A.Media.FlowDirection?)value;
                        NativeControl.FlowDirection = FlowDirection ?? (A.Media.FlowDirection)A.Visual.FlowDirectionProperty.GetDefaultValue(A.Visual.FlowDirectionProperty.OwnerType);
                    }
                    break;
                case nameof(IsVisible):
                    if (!Equals(IsVisible, value))
                    {
                        IsVisible = (bool?)value;
                        NativeControl.IsVisible = IsVisible ?? (bool)A.Visual.IsVisibleProperty.GetDefaultValue(A.Visual.IsVisibleProperty.OwnerType);
                    }
                    break;
                case nameof(Opacity):
                    if (!Equals(Opacity, value))
                    {
                        Opacity = (double?)value;
                        NativeControl.Opacity = Opacity ?? (double)A.Visual.OpacityProperty.GetDefaultValue(A.Visual.OpacityProperty.OwnerType);
                    }
                    break;
                case nameof(OpacityMask):
                    if (!Equals(OpacityMask, value))
                    {
                        OpacityMask = (OneOf.OneOf<A.Media.IBrush,string>)value;
                        if (OpacityMask.IsT0)
                        {
                            NativeControl.OpacityMask = (A.Media.IBrush)OpacityMask.AsT0;
                        }
                        else 
                        {
                            NativeControl.OpacityMask = Avalonia.Media.Brush.Parse(OpacityMask.AsT1);
                        }
                    }
                    break;
                case nameof(RenderTransform):
                    if (!Equals(RenderTransform, value))
                    {
                        RenderTransform = (A.Media.ITransform)value;
                        NativeControl.RenderTransform = RenderTransform;
                    }
                    break;
                case nameof(RenderTransformOrigin):
                    if (!Equals(RenderTransformOrigin, value))
                    {
                        RenderTransformOrigin = (OneOf.OneOf<A.RelativePoint?,string>)value;
                        if (RenderTransformOrigin.IsT0)
                        {
                            NativeControl.RenderTransformOrigin = (A.RelativePoint)RenderTransformOrigin.AsT0;
                        }
                        else 
                        {
                            NativeControl.RenderTransformOrigin = A.RelativePoint.Parse(RenderTransformOrigin.AsT1);
                        }
                    }
                    break;
                case nameof(ZIndex):
                    if (!Equals(ZIndex, value))
                    {
                        ZIndex = (int?)value;
                        NativeControl.ZIndex = ZIndex ?? (int)A.Visual.ZIndexProperty.GetDefaultValue(A.Visual.ZIndexProperty.OwnerType);
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
