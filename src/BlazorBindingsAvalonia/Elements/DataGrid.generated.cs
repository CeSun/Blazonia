// <auto-generated>
//     This code was generated by a BlazorBindingsAvalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using Microsoft.AspNetCore.Components.Rendering;
using System.Collections.Generic;

#pragma warning disable CA2252

namespace BlazorBindingsAvalonia.Elements
{
    /// <summary>
    /// Displays data in a customizable grid.
    /// </summary>
    public partial class DataGrid<T> : BlazorBindingsAvalonia.Elements.Primitives.TemplatedControl
    {
        static DataGrid()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value that indicates whether the row details sections remain fixed at the width of the display area or can scroll horizontally.
        /// </summary>
        [Parameter] public bool? AreRowDetailsFrozen { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates whether the row group header sections remain fixed at the width of the display area or can scroll horizontally.
        /// </summary>
        [Parameter] public bool? AreRowGroupHeadersFrozen { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates whether columns are created automatically when the <see cref="P:Avalonia.Controls.DataGrid.ItemsSource" /> property is set.
        /// </summary>
        [Parameter] public bool? AutoGenerateColumns { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates whether the user can change the column display order by dragging column headers with the mouse.
        /// </summary>
        [Parameter] public bool? CanUserReorderColumns { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates whether the user can adjust column widths using the mouse.
        /// </summary>
        [Parameter] public bool? CanUserResizeColumns { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates whether the user can sort columns by clicking the column header.
        /// </summary>
        [Parameter] public bool? CanUserSortColumns { get; set; }
        /// <summary>
        /// Gets or sets the theme applied to all cells.
        /// </summary>
        [Parameter] public global::Avalonia.Styling.ControlTheme CellTheme { get; set; }
        /// <summary>
        /// The property which determines how DataGrid content is copied to the Clipboard.
        /// </summary>
        [Parameter] public AC.DataGridClipboardCopyMode? ClipboardCopyMode { get; set; }
        /// <summary>
        /// Gets or sets the height of the column headers row.
        /// </summary>
        [Parameter] public double? ColumnHeaderHeight { get; set; }
        /// <summary>
        /// Gets or sets the theme applied to all column headers.
        /// </summary>
        [Parameter] public global::Avalonia.Styling.ControlTheme ColumnHeaderTheme { get; set; }
        /// <summary>
        /// Gets or sets the standard width or automatic sizing mode of columns in the control.
        /// </summary>
        [Parameter] public AC.DataGridLength? ColumnWidth { get; set; }
        /// <summary>
        /// Gets or sets the column that contains the current cell.
        /// </summary>
        [Parameter] public AC.DataGridColumn CurrentColumn { get; set; }
        /// <summary>
        /// Gets or sets the number of columns that the user cannot scroll horizontally.
        /// </summary>
        [Parameter] public int? FrozenColumnCount { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates which grid lines separating inner cells are shown.
        /// </summary>
        [Parameter] public AC.DataGridGridLinesVisibility? GridLinesVisibility { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates the visibility of row and column headers.
        /// </summary>
        [Parameter] public AC.DataGridHeadersVisibility? HeadersVisibility { get; set; }
        /// <summary>
        /// Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to paint grid lines separating rows.
        /// </summary>
        [Parameter] public OneOf.OneOf<global::Avalonia.Media.IBrush, string> HorizontalGridLinesBrush { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates how the horizontal scroll bar is displayed.
        /// </summary>
        [Parameter] public AC.Primitives.ScrollBarVisibility? HorizontalScrollBarVisibility { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates whether the user can edit the values in the control.
        /// </summary>
        [Parameter] public bool? IsReadOnly { get; set; }
        /// <summary>
        /// Gets or sets whether scroll gestures should include inertia in their behavior and value.
        /// </summary>
        [Parameter] public bool? IsScrollInertiaEnabled { get; set; }
        /// <summary>
        /// Gets or sets a collection that is used to generate the content of the control.
        /// </summary>
        [Parameter] public IEnumerable<T> ItemsSource { get; set; }
        /// <summary>
        /// Gets or sets the maximum width of columns in the <see cref="T:Avalonia.Controls.DataGrid" /> .
        /// </summary>
        [Parameter] public double? MaxColumnWidth { get; set; }
        /// <summary>
        /// Gets or sets the minimum width of columns in the <see cref="T:Avalonia.Controls.DataGrid" />.
        /// </summary>
        [Parameter] public double? MinColumnWidth { get; set; }
        /// <summary>
        /// Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to paint row backgrounds.
        /// </summary>
        [Parameter] public OneOf.OneOf<global::Avalonia.Media.IBrush, string> RowBackground { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates when the details sections of rows are displayed.
        /// </summary>
        [Parameter] public AC.DataGridRowDetailsVisibilityMode? RowDetailsVisibilityMode { get; set; }
        /// <summary>
        /// Gets or sets the theme applied to all row groups.
        /// </summary>
        [Parameter] public global::Avalonia.Styling.ControlTheme RowGroupTheme { get; set; }
        /// <summary>
        /// Gets or sets the width of the row header column.
        /// </summary>
        [Parameter] public double? RowHeaderWidth { get; set; }
        /// <summary>
        /// Gets or sets the standard height of rows in the control.
        /// </summary>
        [Parameter] public double? RowHeight { get; set; }
        /// <summary>
        /// Gets or sets the theme applied to all rows.
        /// </summary>
        [Parameter] public global::Avalonia.Styling.ControlTheme RowTheme { get; set; }
        /// <summary>
        /// Gets or sets the index of the current selection.
        /// </summary>
        [Parameter] public int? SelectedIndex { get; set; }
        /// <summary>
        /// Gets or sets the data item corresponding to the selected row.
        /// </summary>
        [Parameter] public object SelectedItem { get; set; }
        /// <summary>
        /// Gets or sets the selection behavior of the data grid.
        /// </summary>
        [Parameter] public AC.DataGridSelectionMode? SelectionMode { get; set; }
        /// <summary>
        /// Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to paint grid lines separating columns.
        /// </summary>
        [Parameter] public OneOf.OneOf<global::Avalonia.Media.IBrush, string> VerticalGridLinesBrush { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates how the vertical scroll bar is displayed.
        /// </summary>
        [Parameter] public AC.Primitives.ScrollBarVisibility? VerticalScrollBarVisibility { get; set; }
        /// <summary>
        /// Gets or sets the template that is used when rendering the column headers.
        /// </summary>
        [Parameter] public RenderFragment DropLocationIndicatorTemplate { get; set; }
        /// <summary>
        /// Gets or sets the template that is used to display the content of the details section of rows.
        /// </summary>
        [Parameter] public RenderFragment<T> RowDetailsTemplate { get; set; }
        [Parameter] public EventCallback<AC.Primitives.ScrollEventArgs> OnHorizontalScroll { get; set; }
        [Parameter] public EventCallback<AC.Primitives.ScrollEventArgs> OnVerticalScroll { get; set; }
        [Parameter] public EventCallback<AC.DataGridAutoGeneratingColumnEventArgs> OnAutoGeneratingColumn { get; set; }
        [Parameter] public EventCallback<AC.DataGridBeginningEditEventArgs> OnBeginningEdit { get; set; }
        [Parameter] public EventCallback<AC.DataGridCellEditEndedEventArgs> OnCellEditEnded { get; set; }
        [Parameter] public EventCallback<AC.DataGridCellEditEndingEventArgs> OnCellEditEnding { get; set; }
        [Parameter] public EventCallback<AC.DataGridCellPointerPressedEventArgs> OnCellPointerPressed { get; set; }
        [Parameter] public EventCallback<AC.DataGridColumnEventArgs> OnColumnDisplayIndexChanged { get; set; }
        [Parameter] public EventCallback<AC.DataGridColumnEventArgs> OnColumnReordered { get; set; }
        [Parameter] public EventCallback<AC.DataGridColumnReorderingEventArgs> OnColumnReordering { get; set; }
        [Parameter] public EventCallback OnCurrentCellChanged { get; set; }
        [Parameter] public EventCallback<AC.DataGridRowEventArgs> OnLoadingRow { get; set; }
        [Parameter] public EventCallback<AC.DataGridPreparingCellForEditEventArgs> OnPreparingCellForEdit { get; set; }
        [Parameter] public EventCallback<AC.DataGridRowEditEndedEventArgs> OnRowEditEnded { get; set; }
        [Parameter] public EventCallback<AC.DataGridRowEditEndingEventArgs> OnRowEditEnding { get; set; }
        [Parameter] public EventCallback<AC.SelectionChangedEventArgs> OnSelectionChanged { get; set; }
        [Parameter] public EventCallback<AC.DataGridColumnEventArgs> OnSorting { get; set; }
        [Parameter] public EventCallback<AC.DataGridRowEventArgs> OnUnloadingRow { get; set; }
        [Parameter] public EventCallback<AC.DataGridRowDetailsEventArgs> OnLoadingRowDetails { get; set; }
        [Parameter] public EventCallback<AC.DataGridRowDetailsEventArgs> OnRowDetailsVisibilityChanged { get; set; }
        [Parameter] public EventCallback<AC.DataGridRowDetailsEventArgs> OnUnloadingRowDetails { get; set; }
        [Parameter] public EventCallback<AC.DataGridRowGroupHeaderEventArgs> OnLoadingRowGroup { get; set; }
        [Parameter] public EventCallback<AC.DataGridRowGroupHeaderEventArgs> OnUnloadingRowGroup { get; set; }
        [Parameter] public EventCallback<AC.DataGridRowClipboardEventArgs> OnCopyingRowClipboardContent { get; set; }

        public new AC.DataGrid NativeControl => (AC.DataGrid)((AvaloniaObject)this).NativeControl;

        protected override AC.DataGrid CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(AreRowDetailsFrozen):
                    if (!Equals(AreRowDetailsFrozen, value))
                    {
                        AreRowDetailsFrozen = (bool?)value;
                        NativeControl.AreRowDetailsFrozen = AreRowDetailsFrozen ?? (bool)AC.DataGrid.AreRowDetailsFrozenProperty.GetDefaultValue(AC.DataGrid.AreRowDetailsFrozenProperty.OwnerType);
                    }
                    break;
                case nameof(AreRowGroupHeadersFrozen):
                    if (!Equals(AreRowGroupHeadersFrozen, value))
                    {
                        AreRowGroupHeadersFrozen = (bool?)value;
                        NativeControl.AreRowGroupHeadersFrozen = AreRowGroupHeadersFrozen ?? (bool)AC.DataGrid.AreRowGroupHeadersFrozenProperty.GetDefaultValue(AC.DataGrid.AreRowGroupHeadersFrozenProperty.OwnerType);
                    }
                    break;
                case nameof(AutoGenerateColumns):
                    if (!Equals(AutoGenerateColumns, value))
                    {
                        AutoGenerateColumns = (bool?)value;
                        NativeControl.AutoGenerateColumns = AutoGenerateColumns ?? (bool)AC.DataGrid.AutoGenerateColumnsProperty.GetDefaultValue(AC.DataGrid.AutoGenerateColumnsProperty.OwnerType);
                    }
                    break;
                case nameof(CanUserReorderColumns):
                    if (!Equals(CanUserReorderColumns, value))
                    {
                        CanUserReorderColumns = (bool?)value;
                        NativeControl.CanUserReorderColumns = CanUserReorderColumns ?? (bool)AC.DataGrid.CanUserReorderColumnsProperty.GetDefaultValue(AC.DataGrid.CanUserReorderColumnsProperty.OwnerType);
                    }
                    break;
                case nameof(CanUserResizeColumns):
                    if (!Equals(CanUserResizeColumns, value))
                    {
                        CanUserResizeColumns = (bool?)value;
                        NativeControl.CanUserResizeColumns = CanUserResizeColumns ?? (bool)AC.DataGrid.CanUserResizeColumnsProperty.GetDefaultValue(AC.DataGrid.CanUserResizeColumnsProperty.OwnerType);
                    }
                    break;
                case nameof(CanUserSortColumns):
                    if (!Equals(CanUserSortColumns, value))
                    {
                        CanUserSortColumns = (bool?)value;
                        NativeControl.CanUserSortColumns = CanUserSortColumns ?? (bool)AC.DataGrid.CanUserSortColumnsProperty.GetDefaultValue(AC.DataGrid.CanUserSortColumnsProperty.OwnerType);
                    }
                    break;
                case nameof(CellTheme):
                    if (!Equals(CellTheme, value))
                    {
                        CellTheme = (global::Avalonia.Styling.ControlTheme)value;
                        NativeControl.CellTheme = CellTheme;
                    }
                    break;
                case nameof(ClipboardCopyMode):
                    if (!Equals(ClipboardCopyMode, value))
                    {
                        ClipboardCopyMode = (AC.DataGridClipboardCopyMode?)value;
                        NativeControl.ClipboardCopyMode = ClipboardCopyMode ?? (AC.DataGridClipboardCopyMode)AC.DataGrid.ClipboardCopyModeProperty.GetDefaultValue(AC.DataGrid.ClipboardCopyModeProperty.OwnerType);
                    }
                    break;
                case nameof(ColumnHeaderHeight):
                    if (!Equals(ColumnHeaderHeight, value))
                    {
                        ColumnHeaderHeight = (double?)value;
                        NativeControl.ColumnHeaderHeight = ColumnHeaderHeight ?? (double)AC.DataGrid.ColumnHeaderHeightProperty.GetDefaultValue(AC.DataGrid.ColumnHeaderHeightProperty.OwnerType);
                    }
                    break;
                case nameof(ColumnHeaderTheme):
                    if (!Equals(ColumnHeaderTheme, value))
                    {
                        ColumnHeaderTheme = (global::Avalonia.Styling.ControlTheme)value;
                        NativeControl.ColumnHeaderTheme = ColumnHeaderTheme;
                    }
                    break;
                case nameof(ColumnWidth):
                    if (!Equals(ColumnWidth, value))
                    {
                        ColumnWidth = (AC.DataGridLength?)value;
                        NativeControl.ColumnWidth = ColumnWidth ?? (AC.DataGridLength)AC.DataGrid.ColumnWidthProperty.GetDefaultValue(AC.DataGrid.ColumnWidthProperty.OwnerType);
                    }
                    break;
                case nameof(CurrentColumn):
                    if (!Equals(CurrentColumn, value))
                    {
                        CurrentColumn = (AC.DataGridColumn)value;
                        NativeControl.CurrentColumn = CurrentColumn;
                    }
                    break;
                case nameof(FrozenColumnCount):
                    if (!Equals(FrozenColumnCount, value))
                    {
                        FrozenColumnCount = (int?)value;
                        NativeControl.FrozenColumnCount = FrozenColumnCount ?? (int)AC.DataGrid.FrozenColumnCountProperty.GetDefaultValue(AC.DataGrid.FrozenColumnCountProperty.OwnerType);
                    }
                    break;
                case nameof(GridLinesVisibility):
                    if (!Equals(GridLinesVisibility, value))
                    {
                        GridLinesVisibility = (AC.DataGridGridLinesVisibility?)value;
                        NativeControl.GridLinesVisibility = GridLinesVisibility ?? (AC.DataGridGridLinesVisibility)AC.DataGrid.GridLinesVisibilityProperty.GetDefaultValue(AC.DataGrid.GridLinesVisibilityProperty.OwnerType);
                    }
                    break;
                case nameof(HeadersVisibility):
                    if (!Equals(HeadersVisibility, value))
                    {
                        HeadersVisibility = (AC.DataGridHeadersVisibility?)value;
                        NativeControl.HeadersVisibility = HeadersVisibility ?? (AC.DataGridHeadersVisibility)AC.DataGrid.HeadersVisibilityProperty.GetDefaultValue(AC.DataGrid.HeadersVisibilityProperty.OwnerType);
                    }
                    break;
                case nameof(HorizontalGridLinesBrush):
                    if (!Equals(HorizontalGridLinesBrush, value))
                    {
                        HorizontalGridLinesBrush = (OneOf.OneOf<global::Avalonia.Media.IBrush,string>)value;
                        if (HorizontalGridLinesBrush.IsT0)
                        {
                            NativeControl.HorizontalGridLinesBrush = (global::Avalonia.Media.IBrush)HorizontalGridLinesBrush.AsT0;
                        }
                        else 
                        {
                            NativeControl.HorizontalGridLinesBrush = Avalonia.Media.Brush.Parse(HorizontalGridLinesBrush.AsT1);
                        }
                    }
                    break;
                case nameof(HorizontalScrollBarVisibility):
                    if (!Equals(HorizontalScrollBarVisibility, value))
                    {
                        HorizontalScrollBarVisibility = (AC.Primitives.ScrollBarVisibility?)value;
                        NativeControl.HorizontalScrollBarVisibility = HorizontalScrollBarVisibility ?? (AC.Primitives.ScrollBarVisibility)AC.DataGrid.HorizontalScrollBarVisibilityProperty.GetDefaultValue(AC.DataGrid.HorizontalScrollBarVisibilityProperty.OwnerType);
                    }
                    break;
                case nameof(IsReadOnly):
                    if (!Equals(IsReadOnly, value))
                    {
                        IsReadOnly = (bool?)value;
                        NativeControl.IsReadOnly = IsReadOnly ?? (bool)AC.DataGrid.IsReadOnlyProperty.GetDefaultValue(AC.DataGrid.IsReadOnlyProperty.OwnerType);
                    }
                    break;
                case nameof(IsScrollInertiaEnabled):
                    if (!Equals(IsScrollInertiaEnabled, value))
                    {
                        IsScrollInertiaEnabled = (bool?)value;
                        NativeControl.IsScrollInertiaEnabled = IsScrollInertiaEnabled ?? (bool)AC.DataGrid.IsScrollInertiaEnabledProperty.GetDefaultValue(AC.DataGrid.IsScrollInertiaEnabledProperty.OwnerType);
                    }
                    break;
                case nameof(ItemsSource):
                    if (!Equals(ItemsSource, value))
                    {
                        ItemsSource = (IEnumerable<T>)value;
                        NativeControl.ItemsSource = ItemsSource;
                    }
                    break;
                case nameof(MaxColumnWidth):
                    if (!Equals(MaxColumnWidth, value))
                    {
                        MaxColumnWidth = (double?)value;
                        NativeControl.MaxColumnWidth = MaxColumnWidth ?? (double)AC.DataGrid.MaxColumnWidthProperty.GetDefaultValue(AC.DataGrid.MaxColumnWidthProperty.OwnerType);
                    }
                    break;
                case nameof(MinColumnWidth):
                    if (!Equals(MinColumnWidth, value))
                    {
                        MinColumnWidth = (double?)value;
                        NativeControl.MinColumnWidth = MinColumnWidth ?? (double)AC.DataGrid.MinColumnWidthProperty.GetDefaultValue(AC.DataGrid.MinColumnWidthProperty.OwnerType);
                    }
                    break;
                case nameof(RowBackground):
                    if (!Equals(RowBackground, value))
                    {
                        RowBackground = (OneOf.OneOf<global::Avalonia.Media.IBrush,string>)value;
                        if (RowBackground.IsT0)
                        {
                            NativeControl.RowBackground = (global::Avalonia.Media.IBrush)RowBackground.AsT0;
                        }
                        else 
                        {
                            NativeControl.RowBackground = Avalonia.Media.Brush.Parse(RowBackground.AsT1);
                        }
                    }
                    break;
                case nameof(RowDetailsVisibilityMode):
                    if (!Equals(RowDetailsVisibilityMode, value))
                    {
                        RowDetailsVisibilityMode = (AC.DataGridRowDetailsVisibilityMode?)value;
                        NativeControl.RowDetailsVisibilityMode = RowDetailsVisibilityMode ?? (AC.DataGridRowDetailsVisibilityMode)AC.DataGrid.RowDetailsVisibilityModeProperty.GetDefaultValue(AC.DataGrid.RowDetailsVisibilityModeProperty.OwnerType);
                    }
                    break;
                case nameof(RowGroupTheme):
                    if (!Equals(RowGroupTheme, value))
                    {
                        RowGroupTheme = (global::Avalonia.Styling.ControlTheme)value;
                        NativeControl.RowGroupTheme = RowGroupTheme;
                    }
                    break;
                case nameof(RowHeaderWidth):
                    if (!Equals(RowHeaderWidth, value))
                    {
                        RowHeaderWidth = (double?)value;
                        NativeControl.RowHeaderWidth = RowHeaderWidth ?? (double)AC.DataGrid.RowHeaderWidthProperty.GetDefaultValue(AC.DataGrid.RowHeaderWidthProperty.OwnerType);
                    }
                    break;
                case nameof(RowHeight):
                    if (!Equals(RowHeight, value))
                    {
                        RowHeight = (double?)value;
                        NativeControl.RowHeight = RowHeight ?? (double)AC.DataGrid.RowHeightProperty.GetDefaultValue(AC.DataGrid.RowHeightProperty.OwnerType);
                    }
                    break;
                case nameof(RowTheme):
                    if (!Equals(RowTheme, value))
                    {
                        RowTheme = (global::Avalonia.Styling.ControlTheme)value;
                        NativeControl.RowTheme = RowTheme;
                    }
                    break;
                case nameof(SelectedIndex):
                    if (!Equals(SelectedIndex, value))
                    {
                        SelectedIndex = (int?)value;
                        NativeControl.SelectedIndex = SelectedIndex ?? (int)AC.DataGrid.SelectedIndexProperty.GetDefaultValue(AC.DataGrid.SelectedIndexProperty.OwnerType);
                    }
                    break;
                case nameof(SelectedItem):
                    if (!Equals(SelectedItem, value))
                    {
                        SelectedItem = (object)value;
                        NativeControl.SelectedItem = SelectedItem;
                    }
                    break;
                case nameof(SelectionMode):
                    if (!Equals(SelectionMode, value))
                    {
                        SelectionMode = (AC.DataGridSelectionMode?)value;
                        NativeControl.SelectionMode = SelectionMode ?? (AC.DataGridSelectionMode)AC.DataGrid.SelectionModeProperty.GetDefaultValue(AC.DataGrid.SelectionModeProperty.OwnerType);
                    }
                    break;
                case nameof(VerticalGridLinesBrush):
                    if (!Equals(VerticalGridLinesBrush, value))
                    {
                        VerticalGridLinesBrush = (OneOf.OneOf<global::Avalonia.Media.IBrush,string>)value;
                        if (VerticalGridLinesBrush.IsT0)
                        {
                            NativeControl.VerticalGridLinesBrush = (global::Avalonia.Media.IBrush)VerticalGridLinesBrush.AsT0;
                        }
                        else 
                        {
                            NativeControl.VerticalGridLinesBrush = Avalonia.Media.Brush.Parse(VerticalGridLinesBrush.AsT1);
                        }
                    }
                    break;
                case nameof(VerticalScrollBarVisibility):
                    if (!Equals(VerticalScrollBarVisibility, value))
                    {
                        VerticalScrollBarVisibility = (AC.Primitives.ScrollBarVisibility?)value;
                        NativeControl.VerticalScrollBarVisibility = VerticalScrollBarVisibility ?? (AC.Primitives.ScrollBarVisibility)AC.DataGrid.VerticalScrollBarVisibilityProperty.GetDefaultValue(AC.DataGrid.VerticalScrollBarVisibilityProperty.OwnerType);
                    }
                    break;
                case nameof(DropLocationIndicatorTemplate):
                    DropLocationIndicatorTemplate = (RenderFragment)value;
                    break;
                case nameof(RowDetailsTemplate):
                    RowDetailsTemplate = (RenderFragment<T>)value;
                    break;
                case nameof(OnHorizontalScroll):
                    if (!Equals(OnHorizontalScroll, value))
                    {
                        void NativeControlHorizontalScroll(object sender, AC.Primitives.ScrollEventArgs e) => InvokeEventCallback(OnHorizontalScroll, e);

                        OnHorizontalScroll = (EventCallback<AC.Primitives.ScrollEventArgs>)value;
                        NativeControl.HorizontalScroll -= NativeControlHorizontalScroll;
                        NativeControl.HorizontalScroll += NativeControlHorizontalScroll;
                    }
                    break;
                case nameof(OnVerticalScroll):
                    if (!Equals(OnVerticalScroll, value))
                    {
                        void NativeControlVerticalScroll(object sender, AC.Primitives.ScrollEventArgs e) => InvokeEventCallback(OnVerticalScroll, e);

                        OnVerticalScroll = (EventCallback<AC.Primitives.ScrollEventArgs>)value;
                        NativeControl.VerticalScroll -= NativeControlVerticalScroll;
                        NativeControl.VerticalScroll += NativeControlVerticalScroll;
                    }
                    break;
                case nameof(OnAutoGeneratingColumn):
                    if (!Equals(OnAutoGeneratingColumn, value))
                    {
                        void NativeControlAutoGeneratingColumn(object sender, AC.DataGridAutoGeneratingColumnEventArgs e) => InvokeEventCallback(OnAutoGeneratingColumn, e);

                        OnAutoGeneratingColumn = (EventCallback<AC.DataGridAutoGeneratingColumnEventArgs>)value;
                        NativeControl.AutoGeneratingColumn -= NativeControlAutoGeneratingColumn;
                        NativeControl.AutoGeneratingColumn += NativeControlAutoGeneratingColumn;
                    }
                    break;
                case nameof(OnBeginningEdit):
                    if (!Equals(OnBeginningEdit, value))
                    {
                        void NativeControlBeginningEdit(object sender, AC.DataGridBeginningEditEventArgs e) => InvokeEventCallback(OnBeginningEdit, e);

                        OnBeginningEdit = (EventCallback<AC.DataGridBeginningEditEventArgs>)value;
                        NativeControl.BeginningEdit -= NativeControlBeginningEdit;
                        NativeControl.BeginningEdit += NativeControlBeginningEdit;
                    }
                    break;
                case nameof(OnCellEditEnded):
                    if (!Equals(OnCellEditEnded, value))
                    {
                        void NativeControlCellEditEnded(object sender, AC.DataGridCellEditEndedEventArgs e) => InvokeEventCallback(OnCellEditEnded, e);

                        OnCellEditEnded = (EventCallback<AC.DataGridCellEditEndedEventArgs>)value;
                        NativeControl.CellEditEnded -= NativeControlCellEditEnded;
                        NativeControl.CellEditEnded += NativeControlCellEditEnded;
                    }
                    break;
                case nameof(OnCellEditEnding):
                    if (!Equals(OnCellEditEnding, value))
                    {
                        void NativeControlCellEditEnding(object sender, AC.DataGridCellEditEndingEventArgs e) => InvokeEventCallback(OnCellEditEnding, e);

                        OnCellEditEnding = (EventCallback<AC.DataGridCellEditEndingEventArgs>)value;
                        NativeControl.CellEditEnding -= NativeControlCellEditEnding;
                        NativeControl.CellEditEnding += NativeControlCellEditEnding;
                    }
                    break;
                case nameof(OnCellPointerPressed):
                    if (!Equals(OnCellPointerPressed, value))
                    {
                        void NativeControlCellPointerPressed(object sender, AC.DataGridCellPointerPressedEventArgs e) => InvokeEventCallback(OnCellPointerPressed, e);

                        OnCellPointerPressed = (EventCallback<AC.DataGridCellPointerPressedEventArgs>)value;
                        NativeControl.CellPointerPressed -= NativeControlCellPointerPressed;
                        NativeControl.CellPointerPressed += NativeControlCellPointerPressed;
                    }
                    break;
                case nameof(OnColumnDisplayIndexChanged):
                    if (!Equals(OnColumnDisplayIndexChanged, value))
                    {
                        void NativeControlColumnDisplayIndexChanged(object sender, AC.DataGridColumnEventArgs e) => InvokeEventCallback(OnColumnDisplayIndexChanged, e);

                        OnColumnDisplayIndexChanged = (EventCallback<AC.DataGridColumnEventArgs>)value;
                        NativeControl.ColumnDisplayIndexChanged -= NativeControlColumnDisplayIndexChanged;
                        NativeControl.ColumnDisplayIndexChanged += NativeControlColumnDisplayIndexChanged;
                    }
                    break;
                case nameof(OnColumnReordered):
                    if (!Equals(OnColumnReordered, value))
                    {
                        void NativeControlColumnReordered(object sender, AC.DataGridColumnEventArgs e) => InvokeEventCallback(OnColumnReordered, e);

                        OnColumnReordered = (EventCallback<AC.DataGridColumnEventArgs>)value;
                        NativeControl.ColumnReordered -= NativeControlColumnReordered;
                        NativeControl.ColumnReordered += NativeControlColumnReordered;
                    }
                    break;
                case nameof(OnColumnReordering):
                    if (!Equals(OnColumnReordering, value))
                    {
                        void NativeControlColumnReordering(object sender, AC.DataGridColumnReorderingEventArgs e) => InvokeEventCallback(OnColumnReordering, e);

                        OnColumnReordering = (EventCallback<AC.DataGridColumnReorderingEventArgs>)value;
                        NativeControl.ColumnReordering -= NativeControlColumnReordering;
                        NativeControl.ColumnReordering += NativeControlColumnReordering;
                    }
                    break;
                case nameof(OnCurrentCellChanged):
                    if (!Equals(OnCurrentCellChanged, value))
                    {
                        void NativeControlCurrentCellChanged(object sender, EventArgs e) => InvokeEventCallback(OnCurrentCellChanged);

                        OnCurrentCellChanged = (EventCallback)value;
                        NativeControl.CurrentCellChanged -= NativeControlCurrentCellChanged;
                        NativeControl.CurrentCellChanged += NativeControlCurrentCellChanged;
                    }
                    break;
                case nameof(OnLoadingRow):
                    if (!Equals(OnLoadingRow, value))
                    {
                        void NativeControlLoadingRow(object sender, AC.DataGridRowEventArgs e) => InvokeEventCallback(OnLoadingRow, e);

                        OnLoadingRow = (EventCallback<AC.DataGridRowEventArgs>)value;
                        NativeControl.LoadingRow -= NativeControlLoadingRow;
                        NativeControl.LoadingRow += NativeControlLoadingRow;
                    }
                    break;
                case nameof(OnPreparingCellForEdit):
                    if (!Equals(OnPreparingCellForEdit, value))
                    {
                        void NativeControlPreparingCellForEdit(object sender, AC.DataGridPreparingCellForEditEventArgs e) => InvokeEventCallback(OnPreparingCellForEdit, e);

                        OnPreparingCellForEdit = (EventCallback<AC.DataGridPreparingCellForEditEventArgs>)value;
                        NativeControl.PreparingCellForEdit -= NativeControlPreparingCellForEdit;
                        NativeControl.PreparingCellForEdit += NativeControlPreparingCellForEdit;
                    }
                    break;
                case nameof(OnRowEditEnded):
                    if (!Equals(OnRowEditEnded, value))
                    {
                        void NativeControlRowEditEnded(object sender, AC.DataGridRowEditEndedEventArgs e) => InvokeEventCallback(OnRowEditEnded, e);

                        OnRowEditEnded = (EventCallback<AC.DataGridRowEditEndedEventArgs>)value;
                        NativeControl.RowEditEnded -= NativeControlRowEditEnded;
                        NativeControl.RowEditEnded += NativeControlRowEditEnded;
                    }
                    break;
                case nameof(OnRowEditEnding):
                    if (!Equals(OnRowEditEnding, value))
                    {
                        void NativeControlRowEditEnding(object sender, AC.DataGridRowEditEndingEventArgs e) => InvokeEventCallback(OnRowEditEnding, e);

                        OnRowEditEnding = (EventCallback<AC.DataGridRowEditEndingEventArgs>)value;
                        NativeControl.RowEditEnding -= NativeControlRowEditEnding;
                        NativeControl.RowEditEnding += NativeControlRowEditEnding;
                    }
                    break;
                case nameof(OnSelectionChanged):
                    if (!Equals(OnSelectionChanged, value))
                    {
                        void NativeControlSelectionChanged(object sender, AC.SelectionChangedEventArgs e) => InvokeEventCallback(OnSelectionChanged, e);

                        OnSelectionChanged = (EventCallback<AC.SelectionChangedEventArgs>)value;
                        NativeControl.SelectionChanged -= NativeControlSelectionChanged;
                        NativeControl.SelectionChanged += NativeControlSelectionChanged;
                    }
                    break;
                case nameof(OnSorting):
                    if (!Equals(OnSorting, value))
                    {
                        void NativeControlSorting(object sender, AC.DataGridColumnEventArgs e) => InvokeEventCallback(OnSorting, e);

                        OnSorting = (EventCallback<AC.DataGridColumnEventArgs>)value;
                        NativeControl.Sorting -= NativeControlSorting;
                        NativeControl.Sorting += NativeControlSorting;
                    }
                    break;
                case nameof(OnUnloadingRow):
                    if (!Equals(OnUnloadingRow, value))
                    {
                        void NativeControlUnloadingRow(object sender, AC.DataGridRowEventArgs e) => InvokeEventCallback(OnUnloadingRow, e);

                        OnUnloadingRow = (EventCallback<AC.DataGridRowEventArgs>)value;
                        NativeControl.UnloadingRow -= NativeControlUnloadingRow;
                        NativeControl.UnloadingRow += NativeControlUnloadingRow;
                    }
                    break;
                case nameof(OnLoadingRowDetails):
                    if (!Equals(OnLoadingRowDetails, value))
                    {
                        void NativeControlLoadingRowDetails(object sender, AC.DataGridRowDetailsEventArgs e) => InvokeEventCallback(OnLoadingRowDetails, e);

                        OnLoadingRowDetails = (EventCallback<AC.DataGridRowDetailsEventArgs>)value;
                        NativeControl.LoadingRowDetails -= NativeControlLoadingRowDetails;
                        NativeControl.LoadingRowDetails += NativeControlLoadingRowDetails;
                    }
                    break;
                case nameof(OnRowDetailsVisibilityChanged):
                    if (!Equals(OnRowDetailsVisibilityChanged, value))
                    {
                        void NativeControlRowDetailsVisibilityChanged(object sender, AC.DataGridRowDetailsEventArgs e) => InvokeEventCallback(OnRowDetailsVisibilityChanged, e);

                        OnRowDetailsVisibilityChanged = (EventCallback<AC.DataGridRowDetailsEventArgs>)value;
                        NativeControl.RowDetailsVisibilityChanged -= NativeControlRowDetailsVisibilityChanged;
                        NativeControl.RowDetailsVisibilityChanged += NativeControlRowDetailsVisibilityChanged;
                    }
                    break;
                case nameof(OnUnloadingRowDetails):
                    if (!Equals(OnUnloadingRowDetails, value))
                    {
                        void NativeControlUnloadingRowDetails(object sender, AC.DataGridRowDetailsEventArgs e) => InvokeEventCallback(OnUnloadingRowDetails, e);

                        OnUnloadingRowDetails = (EventCallback<AC.DataGridRowDetailsEventArgs>)value;
                        NativeControl.UnloadingRowDetails -= NativeControlUnloadingRowDetails;
                        NativeControl.UnloadingRowDetails += NativeControlUnloadingRowDetails;
                    }
                    break;
                case nameof(OnLoadingRowGroup):
                    if (!Equals(OnLoadingRowGroup, value))
                    {
                        void NativeControlLoadingRowGroup(object sender, AC.DataGridRowGroupHeaderEventArgs e) => InvokeEventCallback(OnLoadingRowGroup, e);

                        OnLoadingRowGroup = (EventCallback<AC.DataGridRowGroupHeaderEventArgs>)value;
                        NativeControl.LoadingRowGroup -= NativeControlLoadingRowGroup;
                        NativeControl.LoadingRowGroup += NativeControlLoadingRowGroup;
                    }
                    break;
                case nameof(OnUnloadingRowGroup):
                    if (!Equals(OnUnloadingRowGroup, value))
                    {
                        void NativeControlUnloadingRowGroup(object sender, AC.DataGridRowGroupHeaderEventArgs e) => InvokeEventCallback(OnUnloadingRowGroup, e);

                        OnUnloadingRowGroup = (EventCallback<AC.DataGridRowGroupHeaderEventArgs>)value;
                        NativeControl.UnloadingRowGroup -= NativeControlUnloadingRowGroup;
                        NativeControl.UnloadingRowGroup += NativeControlUnloadingRowGroup;
                    }
                    break;
                case nameof(OnCopyingRowClipboardContent):
                    if (!Equals(OnCopyingRowClipboardContent, value))
                    {
                        void NativeControlCopyingRowClipboardContent(object sender, AC.DataGridRowClipboardEventArgs e) => InvokeEventCallback(OnCopyingRowClipboardContent, e);

                        OnCopyingRowClipboardContent = (EventCallback<AC.DataGridRowClipboardEventArgs>)value;
                        NativeControl.CopyingRowClipboardContent -= NativeControlCopyingRowClipboardContent;
                        NativeControl.CopyingRowClipboardContent += NativeControlCopyingRowClipboardContent;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddControlTemplateProperty<AC.DataGrid, Avalonia.Controls.ITemplate<Avalonia.Controls.Control>>(builder, sequence++, DropLocationIndicatorTemplate,
                (nativeControl, nativeTemplate) => nativeControl.DropLocationIndicatorTemplate = nativeTemplate);
            RenderTreeBuilderHelper.AddDataTemplateProperty<AC.DataGrid, T>(builder, sequence++, RowDetailsTemplate,
                (nativeControl, nativeTemplate) => nativeControl.RowDetailsTemplate = nativeTemplate);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
