// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using AC = Avalonia.Controls;
using BlazorBindings.Core;
using Microsoft.AspNetCore.Components;
using System.Threading.Tasks;

#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements
{
    /// <summary>
    /// Base class for controls which decorate a single child control.
    /// </summary>
    public partial class Decorator : Control
    {
        static Decorator()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the decorated control.
        /// </summary>
        [Parameter] public AC.Control Child { get; set; }
        /// <summary>
        /// Gets or sets the padding to place around the <see cref="P:Avalonia.Controls.Decorator.Child" /> control.
        /// </summary>
        [Parameter] public global::Avalonia.Thickness? Padding { get; set; }

        public new AC.Decorator NativeControl => (AC.Decorator)((BindableObject)this).NativeControl;

        protected override AC.Decorator CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Child):
                    if (!Equals(Child, value))
                    {
                        Child = (AC.Control)value;
                        NativeControl.Child = Child;
                    }
                    break;
                case nameof(Padding):
                    if (!Equals(Padding, value))
                    {
                        Padding = (global::Avalonia.Thickness?)value;
                        NativeControl.Padding = Padding ?? (global::Avalonia.Thickness)AC.Decorator.PaddingProperty.GetDefaultValue(AC.Decorator.PaddingProperty.OwnerType);
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
