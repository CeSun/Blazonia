// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>



#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements
{
    /// <summary>
    /// Viewbox is used to scale single child to fit in the available space.
    /// </summary>
    public partial class Viewbox : Control
    {
        static Viewbox()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the child of the Viewbox
        /// </summary>
        [Parameter] public AC.Control Child { get; set; }
        /// <summary>
        /// Gets or sets the stretch mode, which determines how child fits into the available space.
        /// </summary>
        [Parameter] public global::Avalonia.Media.Stretch? Stretch { get; set; }
        /// <summary>
        /// Gets or sets a value controlling in what direction contents will be stretched.
        /// </summary>
        [Parameter] public global::Avalonia.Media.StretchDirection? StretchDirection { get; set; }

        public new AC.Viewbox NativeControl => (AC.Viewbox)((BindableObject)this).NativeControl;

        protected override AC.Viewbox CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Child):
                    if (!Equals(Child, value))
                    {
                        Child = (AC.Control)value;
                        NativeControl.Child = Child;
                    }
                    break;
                case nameof(Stretch):
                    if (!Equals(Stretch, value))
                    {
                        Stretch = (global::Avalonia.Media.Stretch?)value;
                        NativeControl.Stretch = Stretch ?? (global::Avalonia.Media.Stretch)AC.Viewbox.StretchProperty.GetDefaultValue(AC.Viewbox.StretchProperty.OwnerType);
                    }
                    break;
                case nameof(StretchDirection):
                    if (!Equals(StretchDirection, value))
                    {
                        StretchDirection = (global::Avalonia.Media.StretchDirection?)value;
                        NativeControl.StretchDirection = StretchDirection ?? (global::Avalonia.Media.StretchDirection)AC.Viewbox.StretchDirectionProperty.GetDefaultValue(AC.Viewbox.StretchDirectionProperty.OwnerType);
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
