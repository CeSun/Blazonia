// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>



#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements
{
    /// <summary>
    /// Defines a flexible grid area that consists of columns and rows.
    /// </summary>
    public partial class Grid : Panel
    {
        static Grid()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Returns a ColumnDefinitions of column definitions.
        /// </summary>
        [Parameter] public AC.ColumnDefinitions ColumnDefinitions { get; set; }
        /// <summary>
        /// Returns a RowDefinitions of row definitions.
        /// </summary>
        [Parameter] public AC.RowDefinitions RowDefinitions { get; set; }
        /// <summary>
        /// ShowGridLines property.
        /// </summary>
        [Parameter] public bool? ShowGridLines { get; set; }

        public new AC.Grid NativeControl => (AC.Grid)((AvaloniaObject)this).NativeControl;

        protected override AC.Grid CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(ColumnDefinitions):
                    if (!Equals(ColumnDefinitions, value))
                    {
                        ColumnDefinitions = (AC.ColumnDefinitions)value;
                        NativeControl.ColumnDefinitions = ColumnDefinitions;
                    }
                    break;
                case nameof(RowDefinitions):
                    if (!Equals(RowDefinitions, value))
                    {
                        RowDefinitions = (AC.RowDefinitions)value;
                        NativeControl.RowDefinitions = RowDefinitions;
                    }
                    break;
                case nameof(ShowGridLines):
                    if (!Equals(ShowGridLines, value))
                    {
                        ShowGridLines = (bool?)value;
                        NativeControl.ShowGridLines = ShowGridLines ?? (bool)AC.Grid.ShowGridLinesProperty.GetDefaultValue(AC.Grid.ShowGridLinesProperty.OwnerType);
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
