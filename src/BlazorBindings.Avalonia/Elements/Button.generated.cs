// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using AC = Avalonia.Controls;
using BlazorBindings.Core;
using Microsoft.AspNetCore.Components;
using System.Threading.Tasks;
using System.Windows.Input;

#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements
{
    /// <summary>
    /// A standard button control.
    /// </summary>
    public partial class Button : ContentControl
    {
        static Button()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value indicating how the <see cref="T:Avalonia.Controls.Button" /> should react to clicks.
        /// </summary>
        [Parameter] public AC.ClickMode? ClickMode { get; set; }
        /// <summary>
        /// Gets or sets an <see cref="T:System.Windows.Input.ICommand" /> to be invoked when the button is clicked.
        /// </summary>
        [Parameter] public ICommand Command { get; set; }
        /// <summary>
        /// Gets or sets a parameter to be passed to the <see cref="P:Avalonia.Controls.Button.Command" />.
        /// </summary>
        [Parameter] public object CommandParameter { get; set; }
        /// <summary>
        /// Gets or sets the Flyout that should be shown with this button.
        /// </summary>
        [Parameter] public AC.Primitives.FlyoutBase Flyout { get; set; }
        /// <summary>
        /// Gets or sets an <see cref="T:Avalonia.Input.KeyGesture" /> associated with this control
        /// </summary>
        [Parameter] public global::Avalonia.Input.KeyGesture HotKey { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the button is the Cancel button for the window.
        /// </summary>
        [Parameter] public bool? IsCancel { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the button is the default button for the window.
        /// </summary>
        [Parameter] public bool? IsDefault { get; set; }
        [Parameter] public EventCallback<global::Avalonia.Interactivity.RoutedEventArgs> OnClick { get; set; }

        public new AC.Button NativeControl => (AC.Button)((BindableObject)this).NativeControl;

        protected override AC.Button CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(ClickMode):
                    if (!Equals(ClickMode, value))
                    {
                        ClickMode = (AC.ClickMode?)value;
                        NativeControl.ClickMode = ClickMode ?? (AC.ClickMode)AC.Button.ClickModeProperty.GetDefaultValue(AC.Button.ClickModeProperty.OwnerType);
                    }
                    break;
                case nameof(Command):
                    if (!Equals(Command, value))
                    {
                        Command = (ICommand)value;
                        NativeControl.Command = Command;
                    }
                    break;
                case nameof(CommandParameter):
                    if (!Equals(CommandParameter, value))
                    {
                        CommandParameter = (object)value;
                        NativeControl.CommandParameter = CommandParameter;
                    }
                    break;
                case nameof(Flyout):
                    if (!Equals(Flyout, value))
                    {
                        Flyout = (AC.Primitives.FlyoutBase)value;
                        NativeControl.Flyout = Flyout;
                    }
                    break;
                case nameof(HotKey):
                    if (!Equals(HotKey, value))
                    {
                        HotKey = (global::Avalonia.Input.KeyGesture)value;
                        NativeControl.HotKey = HotKey;
                    }
                    break;
                case nameof(IsCancel):
                    if (!Equals(IsCancel, value))
                    {
                        IsCancel = (bool?)value;
                        NativeControl.IsCancel = IsCancel ?? (bool)AC.Button.IsCancelProperty.GetDefaultValue(AC.Button.IsCancelProperty.OwnerType);
                    }
                    break;
                case nameof(IsDefault):
                    if (!Equals(IsDefault, value))
                    {
                        IsDefault = (bool?)value;
                        NativeControl.IsDefault = IsDefault ?? (bool)AC.Button.IsDefaultProperty.GetDefaultValue(AC.Button.IsDefaultProperty.OwnerType);
                    }
                    break;
                case nameof(OnClick):
                    if (!Equals(OnClick, value))
                    {
                        void NativeControlClick(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => InvokeEventCallback(OnClick, e);

                        OnClick = (EventCallback<global::Avalonia.Interactivity.RoutedEventArgs>)value;
                        NativeControl.Click -= NativeControlClick;
                        NativeControl.Click += NativeControlClick;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
