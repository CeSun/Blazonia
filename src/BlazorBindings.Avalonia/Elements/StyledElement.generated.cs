// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using A = Avalonia;
using BlazorBindings.Core;
using Microsoft.AspNetCore.Components;
using System;
using System.Threading.Tasks;

#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements
{
    /// <summary>
    /// Extends an <see cref="T:Avalonia.Animation.Animatable" /> with the following features: - An inherited <see cref="P:Avalonia.StyledElement.DataContext" />. - Implements <see cref="T:Avalonia.Styling.IStyleable" /> to allow styling to work on the styled element. - Implements <see cref="T:Avalonia.LogicalTree.ILogical" /> to form part of a logical tree. - A collection of class strings for custom styling.
    /// </summary>
    public partial class StyledElement : BlazorBindings.AvaloniaBindings.Elements.Animation.Animatable
    {
        static StyledElement()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the control's data context.
        /// </summary>
        [Parameter] public object DataContext { get; set; }
        /// <summary>
        /// Gets or sets the name of the styled element.
        /// </summary>
        [Parameter] public string Name { get; set; }
        /// <summary>
        /// Gets or sets the styled element's resource dictionary.
        /// </summary>
        [Parameter] public A.Controls.IResourceDictionary Resources { get; set; }
        /// <summary>
        /// Gets or sets the theme to be applied to the element.
        /// </summary>
        [Parameter] public A.Styling.ControlTheme Theme { get; set; }
        [Parameter] public EventCallback<A.LogicalTree.LogicalTreeAttachmentEventArgs> OnAttachedToLogicalTree { get; set; }
        [Parameter] public EventCallback<A.LogicalTree.LogicalTreeAttachmentEventArgs> OnDetachedFromLogicalTree { get; set; }
        [Parameter] public EventCallback<object> DataContextChanged { get; set; }
        [Parameter] public EventCallback OnInitialized { get; set; }
        [Parameter] public EventCallback<A.Controls.IResourceDictionary> ResourcesChanged { get; set; }
        [Parameter] public EventCallback OnActualThemeVariantChanged { get; set; }

        public new A.StyledElement NativeControl => (A.StyledElement)((BindableObject)this).NativeControl;

        protected override A.StyledElement CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(DataContext):
                    if (!Equals(DataContext, value))
                    {
                        DataContext = (object)value;
                        NativeControl.DataContext = DataContext;
                    }
                    break;
                case nameof(Name):
                    if (!Equals(Name, value))
                    {
                        Name = (string)value;
                        NativeControl.Name = Name;
                    }
                    break;
                case nameof(Resources):
                    if (!Equals(Resources, value))
                    {
                        Resources = (A.Controls.IResourceDictionary)value;
                        NativeControl.Resources = Resources;
                    }
                    break;
                case nameof(Theme):
                    if (!Equals(Theme, value))
                    {
                        Theme = (A.Styling.ControlTheme)value;
                        NativeControl.Theme = Theme;
                    }
                    break;
                case nameof(OnAttachedToLogicalTree):
                    if (!Equals(OnAttachedToLogicalTree, value))
                    {
                        void NativeControlAttachedToLogicalTree(object sender, A.LogicalTree.LogicalTreeAttachmentEventArgs e) => InvokeEventCallback(OnAttachedToLogicalTree, e);

                        OnAttachedToLogicalTree = (EventCallback<A.LogicalTree.LogicalTreeAttachmentEventArgs>)value;
                        NativeControl.AttachedToLogicalTree -= NativeControlAttachedToLogicalTree;
                        NativeControl.AttachedToLogicalTree += NativeControlAttachedToLogicalTree;
                    }
                    break;
                case nameof(OnDetachedFromLogicalTree):
                    if (!Equals(OnDetachedFromLogicalTree, value))
                    {
                        void NativeControlDetachedFromLogicalTree(object sender, A.LogicalTree.LogicalTreeAttachmentEventArgs e) => InvokeEventCallback(OnDetachedFromLogicalTree, e);

                        OnDetachedFromLogicalTree = (EventCallback<A.LogicalTree.LogicalTreeAttachmentEventArgs>)value;
                        NativeControl.DetachedFromLogicalTree -= NativeControlDetachedFromLogicalTree;
                        NativeControl.DetachedFromLogicalTree += NativeControlDetachedFromLogicalTree;
                    }
                    break;
                case nameof(DataContextChanged):
                    if (!Equals(DataContextChanged, value))
                    {
                        void NativeControlDataContextChanged(object sender, EventArgs e)
                        {
                            var value = NativeControl.DataContext;
                            DataContext = value;
                            InvokeEventCallback(DataContextChanged, value);
                        }

                        DataContextChanged = (EventCallback<object>)value;
                        NativeControl.DataContextChanged -= NativeControlDataContextChanged;
                        NativeControl.DataContextChanged += NativeControlDataContextChanged;
                    }
                    break;
                case nameof(OnInitialized):
                    if (!Equals(OnInitialized, value))
                    {
                        void NativeControlInitialized(object sender, EventArgs e) => InvokeEventCallback(OnInitialized);

                        OnInitialized = (EventCallback)value;
                        NativeControl.Initialized -= NativeControlInitialized;
                        NativeControl.Initialized += NativeControlInitialized;
                    }
                    break;
                case nameof(ResourcesChanged):
                    if (!Equals(ResourcesChanged, value))
                    {
                        void NativeControlResourcesChanged(object sender, A.Controls.ResourcesChangedEventArgs e)
                        {
                            var value = NativeControl.Resources;
                            Resources = value;
                            InvokeEventCallback(ResourcesChanged, value);
                        }

                        ResourcesChanged = (EventCallback<A.Controls.IResourceDictionary>)value;
                        NativeControl.ResourcesChanged -= NativeControlResourcesChanged;
                        NativeControl.ResourcesChanged += NativeControlResourcesChanged;
                    }
                    break;
                case nameof(OnActualThemeVariantChanged):
                    if (!Equals(OnActualThemeVariantChanged, value))
                    {
                        void NativeControlActualThemeVariantChanged(object sender, EventArgs e) => InvokeEventCallback(OnActualThemeVariantChanged);

                        OnActualThemeVariantChanged = (EventCallback)value;
                        NativeControl.ActualThemeVariantChanged -= NativeControlActualThemeVariantChanged;
                        NativeControl.ActualThemeVariantChanged += NativeControlActualThemeVariantChanged;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
