// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>



#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements
{
    /// <summary>
    /// Base class for menu controls.
    /// </summary>
    public abstract partial class MenuBase<T> : BlazorBindings.AvaloniaBindings.Elements.Primitives.SelectingItemsControl<T>
    {
        static MenuBase()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public EventCallback<global::Avalonia.Interactivity.RoutedEventArgs> OnOpened { get; set; }
        [Parameter] public EventCallback<global::Avalonia.Interactivity.RoutedEventArgs> OnClosed { get; set; }

        public new AC.MenuBase NativeControl => (AC.MenuBase)((BindableObject)this).NativeControl;


        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(OnOpened):
                    if (!Equals(OnOpened, value))
                    {
                        void NativeControlOpened(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => InvokeEventCallback(OnOpened, e);

                        OnOpened = (EventCallback<global::Avalonia.Interactivity.RoutedEventArgs>)value;
                        NativeControl.Opened -= NativeControlOpened;
                        NativeControl.Opened += NativeControlOpened;
                    }
                    break;
                case nameof(OnClosed):
                    if (!Equals(OnClosed, value))
                    {
                        void NativeControlClosed(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => InvokeEventCallback(OnClosed, e);

                        OnClosed = (EventCallback<global::Avalonia.Interactivity.RoutedEventArgs>)value;
                        NativeControl.Closed -= NativeControlClosed;
                        NativeControl.Closed += NativeControlClosed;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
