// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using ACS = Avalonia.Controls.Shapes;
using BlazorBindings.AvaloniaBindings.Elements;

#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements.Shapes
{
    /// <summary>
    /// Represents a rectangle with optional rounded corners.
    /// </summary>
    public partial class Rectangle : Shape
    {
        static Rectangle()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the radius on the X-axis used to round the corners of the rectangle. Corner radii are represented by an ellipse so this is the X-axis width of the ellipse.
        /// </summary>
        [Parameter] public double? RadiusX { get; set; }
        /// <summary>
        /// Gets or sets the radius on the Y-axis used to round the corners of the rectangle. Corner radii are represented by an ellipse so this is the Y-axis height of the ellipse.
        /// </summary>
        [Parameter] public double? RadiusY { get; set; }

        public new ACS.Rectangle NativeControl => (ACS.Rectangle)((BindableObject)this).NativeControl;

        protected override ACS.Rectangle CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(RadiusX):
                    if (!Equals(RadiusX, value))
                    {
                        RadiusX = (double?)value;
                        NativeControl.RadiusX = RadiusX ?? (double)ACS.Rectangle.RadiusXProperty.GetDefaultValue(ACS.Rectangle.RadiusXProperty.OwnerType);
                    }
                    break;
                case nameof(RadiusY):
                    if (!Equals(RadiusY, value))
                    {
                        RadiusY = (double?)value;
                        NativeControl.RadiusY = RadiusY ?? (double)ACS.Rectangle.RadiusYProperty.GetDefaultValue(ACS.Rectangle.RadiusYProperty.OwnerType);
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
