// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using ACS = Avalonia.Controls.Shapes;
using BlazorBindings.AvaloniaBindings.Elements;
using BlazorBindings.Core;
using Microsoft.AspNetCore.Components;
using System.Threading.Tasks;

#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements.Shapes
{
    public partial class Line : Shape
    {
        static Line()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public global::Avalonia.Point? EndPoint { get; set; }
        [Parameter] public global::Avalonia.Point? StartPoint { get; set; }

        public new ACS.Line NativeControl => (ACS.Line)((BindableObject)this).NativeControl;

        protected override ACS.Line CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(EndPoint):
                    if (!Equals(EndPoint, value))
                    {
                        EndPoint = (global::Avalonia.Point?)value;
                        NativeControl.EndPoint = EndPoint ?? (global::Avalonia.Point)ACS.Line.EndPointProperty.GetDefaultValue(ACS.Line.EndPointProperty.OwnerType);
                    }
                    break;
                case nameof(StartPoint):
                    if (!Equals(StartPoint, value))
                    {
                        StartPoint = (global::Avalonia.Point?)value;
                        NativeControl.StartPoint = StartPoint ?? (global::Avalonia.Point)ACS.Line.StartPointProperty.GetDefaultValue(ACS.Line.StartPointProperty.OwnerType);
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
