// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using ACS = Avalonia.Controls.Shapes;
using BlazorBindings.AvaloniaBindings.Elements;

#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements.Shapes
{
    public partial class Ellipse : Shape
    {
        [Parameter] new public Action<Ellipse> Attached { get; set; }

        protected override bool HandleAdditionalParameter(string name, object value)
        {
            //if (name == nameof(EllipseAttached))
            //{
            //    if (!Equals(EllipseAttached, value))
            //    {
            //        //this.EllipseAttached.InvokeAsync(this);
            //        EllipseAttached = (EventCallback<Ellipse>)value;
            //        EllipseAttached.InvokeAsync(this);
            //    }
            //    return true;
            //}
            return base.HandleAdditionalParameter(name, value);
        }

        //public override async  Task SetParametersAsync(ParameterView parameters)
        //{
        //    if (EllipseAttached.HasDelegate)
        //    {
        //        await EllipseAttached.InvokeAsync(this);
        //        return;
        //    }
        //    await base.SetParametersAsync(parameters);
        //}
    }

    public static class EllipseExtensions
    {
        public static Ellipse ToolTip_TipExtension(this Ellipse self, string text)
        {
            //RenderTreeBuilderHelper.AddContentProperty<AC.Control>(builder, sequence++, b =>
            //{
            //    b.OpenComponent<TextBlock>(0);
            //    b.AddAttribute(1, nameof(TextBlock.Text), ToolTip_TipText);
            //    b.CloseComponent();
            //},
            //    (nativeControl, value) => AC.ToolTip.SetTip(nativeControl, value));
            self.ToolTip_TipText = text;

            return self;
        }
    }
}
