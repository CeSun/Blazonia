// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>



#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements
{
    /// <summary>
    /// A control with a header that has a collapsible content section.
    /// </summary>
    public partial class Expander : BlazorBindings.AvaloniaBindings.Elements.Primitives.HeaderedContentControl
    {
        static Expander()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the transition used when expanding or collapsing the content.
        /// </summary>
        [Parameter] public global::Avalonia.Animation.IPageTransition ContentTransition { get; set; }
        /// <summary>
        /// Gets or sets the direction in which the <see cref="T:Avalonia.Controls.Expander" /> opens.
        /// </summary>
        [Parameter] public AC.ExpandDirection? ExpandDirection { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the <see cref="T:Avalonia.Controls.Expander" /> content area is open and visible.
        /// </summary>
        [Parameter] public bool? IsExpanded { get; set; }
        [Parameter] public EventCallback<global::Avalonia.Interactivity.RoutedEventArgs> OnCollapsed { get; set; }
        [Parameter] public EventCallback<global::Avalonia.Interactivity.CancelRoutedEventArgs> OnCollapsing { get; set; }
        [Parameter] public EventCallback<bool> IsExpandedChanged { get; set; }
        [Parameter] public EventCallback<global::Avalonia.Interactivity.CancelRoutedEventArgs> OnExpanding { get; set; }

        public new AC.Expander NativeControl => (AC.Expander)((AvaloniaObject)this).NativeControl;

        protected override AC.Expander CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(ContentTransition):
                    if (!Equals(ContentTransition, value))
                    {
                        ContentTransition = (global::Avalonia.Animation.IPageTransition)value;
                        NativeControl.ContentTransition = ContentTransition;
                    }
                    break;
                case nameof(ExpandDirection):
                    if (!Equals(ExpandDirection, value))
                    {
                        ExpandDirection = (AC.ExpandDirection?)value;
                        NativeControl.ExpandDirection = ExpandDirection ?? (AC.ExpandDirection)AC.Expander.ExpandDirectionProperty.GetDefaultValue(AC.Expander.ExpandDirectionProperty.OwnerType);
                    }
                    break;
                case nameof(IsExpanded):
                    if (!Equals(IsExpanded, value))
                    {
                        IsExpanded = (bool?)value;
                        NativeControl.IsExpanded = IsExpanded ?? (bool)AC.Expander.IsExpandedProperty.GetDefaultValue(AC.Expander.IsExpandedProperty.OwnerType);
                    }
                    break;
                case nameof(OnCollapsed):
                    if (!Equals(OnCollapsed, value))
                    {
                        void NativeControlCollapsed(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => InvokeEventCallback(OnCollapsed, e);

                        OnCollapsed = (EventCallback<global::Avalonia.Interactivity.RoutedEventArgs>)value;
                        NativeControl.Collapsed -= NativeControlCollapsed;
                        NativeControl.Collapsed += NativeControlCollapsed;
                    }
                    break;
                case nameof(OnCollapsing):
                    if (!Equals(OnCollapsing, value))
                    {
                        void NativeControlCollapsing(object sender, global::Avalonia.Interactivity.CancelRoutedEventArgs e) => InvokeEventCallback(OnCollapsing, e);

                        OnCollapsing = (EventCallback<global::Avalonia.Interactivity.CancelRoutedEventArgs>)value;
                        NativeControl.Collapsing -= NativeControlCollapsing;
                        NativeControl.Collapsing += NativeControlCollapsing;
                    }
                    break;
                case nameof(IsExpandedChanged):
                    if (!Equals(IsExpandedChanged, value))
                    {
                        void NativeControlExpanded(object sender, global::Avalonia.Interactivity.RoutedEventArgs e)
                        {
                            var value = NativeControl.IsExpanded;
                            IsExpanded = value;
                            InvokeEventCallback(IsExpandedChanged, value);
                        }

                        IsExpandedChanged = (EventCallback<bool>)value;
                        NativeControl.Expanded -= NativeControlExpanded;
                        NativeControl.Expanded += NativeControlExpanded;
                    }
                    break;
                case nameof(OnExpanding):
                    if (!Equals(OnExpanding, value))
                    {
                        void NativeControlExpanding(object sender, global::Avalonia.Interactivity.CancelRoutedEventArgs e) => InvokeEventCallback(OnExpanding, e);

                        OnExpanding = (EventCallback<global::Avalonia.Interactivity.CancelRoutedEventArgs>)value;
                        NativeControl.Expanding -= NativeControlExpanding;
                        NativeControl.Expanding += NativeControlExpanding;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
