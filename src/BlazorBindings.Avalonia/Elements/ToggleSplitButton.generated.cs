// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>



#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements
{
    /// <summary>
    /// A button with primary and secondary parts that can each be pressed separately. The primary part behaves like a <see cref="T:Avalonia.Controls.Primitives.ToggleButton" /> with two states and the secondary part opens a flyout.
    /// </summary>
    public partial class ToggleSplitButton : SplitButton
    {
        static ToggleSplitButton()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value indicating whether the <see cref="T:Avalonia.Controls.ToggleSplitButton" /> is checked.
        /// </summary>
        [Parameter] public bool? IsChecked { get; set; }
        [Parameter] public EventCallback<bool> IsCheckedChanged { get; set; }

        public new AC.ToggleSplitButton NativeControl => (AC.ToggleSplitButton)((AvaloniaObject)this).NativeControl;

        protected override AC.ToggleSplitButton CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(IsChecked):
                    if (!Equals(IsChecked, value))
                    {
                        IsChecked = (bool?)value;
                        NativeControl.IsChecked = IsChecked ?? (bool)AC.ToggleSplitButton.IsCheckedProperty.GetDefaultValue(AC.ToggleSplitButton.IsCheckedProperty.OwnerType);
                    }
                    break;
                case nameof(IsCheckedChanged):
                    if (!Equals(IsCheckedChanged, value))
                    {
                        void NativeControlIsCheckedChanged(object sender, global::Avalonia.Interactivity.RoutedEventArgs e)
                        {
                            var value = NativeControl.IsChecked;
                            IsChecked = value;
                            InvokeEventCallback(IsCheckedChanged, value);
                        }

                        IsCheckedChanged = (EventCallback<bool>)value;
                        NativeControl.IsCheckedChanged -= NativeControlIsCheckedChanged;
                        NativeControl.IsCheckedChanged += NativeControlIsCheckedChanged;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
