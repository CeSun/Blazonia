// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Avalonia.Elements.Primitives;
using Microsoft.AspNetCore.Components.Rendering;

#pragma warning disable CA2252

namespace BlazorBindings.Avalonia.Elements
{
    /// <summary>
    /// Represents the control that redistributes space between columns or rows of a <see cref="T:Avalonia.Controls.Grid" /> control.
    /// </summary>
    public partial class GridSplitter : Thumb
    {
        static GridSplitter()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Restricts splitter to move a multiple of the specified units.
        /// </summary>
        [Parameter] public double? DragIncrement { get; set; }
        /// <summary>
        /// The Distance to move the splitter when pressing the keyboard arrow keys.
        /// </summary>
        [Parameter] public double? KeyboardIncrement { get; set; }
        /// <summary>
        /// Indicates which Columns or Rows the Splitter resizes.
        /// </summary>
        [Parameter] public AC.GridResizeBehavior? ResizeBehavior { get; set; }
        /// <summary>
        /// Indicates whether the Splitter resizes the Columns, Rows, or Both.
        /// </summary>
        [Parameter] public AC.GridResizeDirection? ResizeDirection { get; set; }
        /// <summary>
        /// Indicates whether to Preview the column resizing without updating layout.
        /// </summary>
        [Parameter] public bool? ShowsPreview { get; set; }
        /// <summary>
        /// Gets or sets content that will be shown when <see cref="P:Avalonia.Controls.GridSplitter.ShowsPreview" /> is enabled and user starts resize operation.
        /// </summary>
        [Parameter] public RenderFragment PreviewContent { get; set; }

        public new AC.GridSplitter NativeControl => (AC.GridSplitter)((AvaloniaObject)this).NativeControl;

        protected override AC.GridSplitter CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(DragIncrement):
                    if (!Equals(DragIncrement, value))
                    {
                        DragIncrement = (double?)value;
                        NativeControl.DragIncrement = DragIncrement ?? (double)AC.GridSplitter.DragIncrementProperty.GetDefaultValue(AC.GridSplitter.DragIncrementProperty.OwnerType);
                    }
                    break;
                case nameof(KeyboardIncrement):
                    if (!Equals(KeyboardIncrement, value))
                    {
                        KeyboardIncrement = (double?)value;
                        NativeControl.KeyboardIncrement = KeyboardIncrement ?? (double)AC.GridSplitter.KeyboardIncrementProperty.GetDefaultValue(AC.GridSplitter.KeyboardIncrementProperty.OwnerType);
                    }
                    break;
                case nameof(ResizeBehavior):
                    if (!Equals(ResizeBehavior, value))
                    {
                        ResizeBehavior = (AC.GridResizeBehavior?)value;
                        NativeControl.ResizeBehavior = ResizeBehavior ?? (AC.GridResizeBehavior)AC.GridSplitter.ResizeBehaviorProperty.GetDefaultValue(AC.GridSplitter.ResizeBehaviorProperty.OwnerType);
                    }
                    break;
                case nameof(ResizeDirection):
                    if (!Equals(ResizeDirection, value))
                    {
                        ResizeDirection = (AC.GridResizeDirection?)value;
                        NativeControl.ResizeDirection = ResizeDirection ?? (AC.GridResizeDirection)AC.GridSplitter.ResizeDirectionProperty.GetDefaultValue(AC.GridSplitter.ResizeDirectionProperty.OwnerType);
                    }
                    break;
                case nameof(ShowsPreview):
                    if (!Equals(ShowsPreview, value))
                    {
                        ShowsPreview = (bool?)value;
                        NativeControl.ShowsPreview = ShowsPreview ?? (bool)AC.GridSplitter.ShowsPreviewProperty.GetDefaultValue(AC.GridSplitter.ShowsPreviewProperty.OwnerType);
                    }
                    break;
                case nameof(PreviewContent):
                    PreviewContent = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddControlTemplateProperty<AC.GridSplitter, AC.ITemplate<AvaloniaPage>>(builder, sequence++, PreviewContent,
                (nativeControl, nativeTemplate) => nativeControl.PreviewContent = nativeTemplate);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
