// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using AC = Avalonia.Controls;
using BlazorBindings.Core;
using Microsoft.AspNetCore.Components;
using System.Threading.Tasks;

#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements
{
    /// <summary>
    /// Base class for controls that can contain multiple children.
    /// </summary>
    public partial class Panel : Control
    {
        static Panel()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or Sets Panel background brush.
        /// </summary>
        [Parameter] public global::Avalonia.Media.IBrush Background { get; set; }

        public new AC.Panel NativeControl => (AC.Panel)((BindableObject)this).NativeControl;

        protected override AC.Panel CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Background):
                    if (!Equals(Background, value))
                    {
                        Background = (global::Avalonia.Media.IBrush)value;
                        NativeControl.Background = Background;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
