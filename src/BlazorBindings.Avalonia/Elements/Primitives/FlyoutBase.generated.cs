// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using ACP = Avalonia.Controls.Primitives;
using BlazorBindings.AvaloniaBindings.Elements;

#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements.Primitives
{
    public abstract partial class FlyoutBase : BlazorBindings.AvaloniaBindings.Elements.BindableObject
    {
        static FlyoutBase()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public EventCallback OnOpened { get; set; }
        [Parameter] public EventCallback OnClosed { get; set; }

        public new ACP.FlyoutBase NativeControl => (ACP.FlyoutBase)((BindableObject)this).NativeControl;


        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(OnOpened):
                    if (!Equals(OnOpened, value))
                    {
                        void NativeControlOpened(object sender, EventArgs e) => InvokeEventCallback(OnOpened);

                        OnOpened = (EventCallback)value;
                        NativeControl.Opened -= NativeControlOpened;
                        NativeControl.Opened += NativeControlOpened;
                    }
                    break;
                case nameof(OnClosed):
                    if (!Equals(OnClosed, value))
                    {
                        void NativeControlClosed(object sender, EventArgs e) => InvokeEventCallback(OnClosed);

                        OnClosed = (EventCallback)value;
                        NativeControl.Closed -= NativeControlClosed;
                        NativeControl.Closed += NativeControlClosed;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
