// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>



#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements
{
    /// <summary>
    /// Base class for Avalonia controls.
    /// </summary>
    public partial class Control : BlazorBindings.AvaloniaBindings.Elements.Input.InputElement
    {
        static Control()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a context flyout to the control
        /// </summary>
        [Parameter] public AC.Primitives.FlyoutBase ContextFlyout { get; set; }
        /// <summary>
        /// Gets or sets a context menu to the control.
        /// </summary>
        [Parameter] public AC.ContextMenu ContextMenu { get; set; }
        /// <summary>
        /// Gets or sets the control's focus adorner.
        /// </summary>
        [Parameter] public AC.ITemplate<AC.Control> FocusAdorner { get; set; }
        /// <summary>
        /// Gets or sets a user-defined object attached to the control.
        /// </summary>
        [Parameter] public object Tag { get; set; }
        [Parameter] public EventCallback<AC.ContextRequestedEventArgs> OnContextRequested { get; set; }
        [Parameter] public EventCallback<global::Avalonia.Interactivity.RoutedEventArgs> OnLoaded { get; set; }
        [Parameter] public EventCallback<global::Avalonia.Interactivity.RoutedEventArgs> OnUnloaded { get; set; }
        [Parameter] public EventCallback<AC.SizeChangedEventArgs> OnSizeChanged { get; set; }

        public new AC.Control NativeControl => (AC.Control)((BindableObject)this).NativeControl;

        protected override AC.Control CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(ContextFlyout):
                    if (!Equals(ContextFlyout, value))
                    {
                        ContextFlyout = (AC.Primitives.FlyoutBase)value;
                        NativeControl.ContextFlyout = ContextFlyout;
                    }
                    break;
                case nameof(ContextMenu):
                    if (!Equals(ContextMenu, value))
                    {
                        ContextMenu = (AC.ContextMenu)value;
                        NativeControl.ContextMenu = ContextMenu;
                    }
                    break;
                case nameof(FocusAdorner):
                    if (!Equals(FocusAdorner, value))
                    {
                        FocusAdorner = (AC.ITemplate<AC.Control>)value;
                        NativeControl.FocusAdorner = FocusAdorner;
                    }
                    break;
                case nameof(Tag):
                    if (!Equals(Tag, value))
                    {
                        Tag = (object)value;
                        NativeControl.Tag = Tag;
                    }
                    break;
                case nameof(OnContextRequested):
                    if (!Equals(OnContextRequested, value))
                    {
                        void NativeControlContextRequested(object sender, AC.ContextRequestedEventArgs e) => InvokeEventCallback(OnContextRequested, e);

                        OnContextRequested = (EventCallback<AC.ContextRequestedEventArgs>)value;
                        NativeControl.ContextRequested -= NativeControlContextRequested;
                        NativeControl.ContextRequested += NativeControlContextRequested;
                    }
                    break;
                case nameof(OnLoaded):
                    if (!Equals(OnLoaded, value))
                    {
                        void NativeControlLoaded(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => InvokeEventCallback(OnLoaded, e);

                        OnLoaded = (EventCallback<global::Avalonia.Interactivity.RoutedEventArgs>)value;
                        NativeControl.Loaded -= NativeControlLoaded;
                        NativeControl.Loaded += NativeControlLoaded;
                    }
                    break;
                case nameof(OnUnloaded):
                    if (!Equals(OnUnloaded, value))
                    {
                        void NativeControlUnloaded(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => InvokeEventCallback(OnUnloaded, e);

                        OnUnloaded = (EventCallback<global::Avalonia.Interactivity.RoutedEventArgs>)value;
                        NativeControl.Unloaded -= NativeControlUnloaded;
                        NativeControl.Unloaded += NativeControlUnloaded;
                    }
                    break;
                case nameof(OnSizeChanged):
                    if (!Equals(OnSizeChanged, value))
                    {
                        void NativeControlSizeChanged(object sender, AC.SizeChangedEventArgs e) => InvokeEventCallback(OnSizeChanged, e);

                        OnSizeChanged = (EventCallback<AC.SizeChangedEventArgs>)value;
                        NativeControl.SizeChanged -= NativeControlSizeChanged;
                        NativeControl.SizeChanged += NativeControlSizeChanged;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
