// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using AL = Avalonia.Layout;
using BlazorBindings.AvaloniaBindings.Elements;

#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements.Layout
{
    /// <summary>
    /// Represents the base class for an object that sizes and arranges child elements for a host.
    /// </summary>
    public abstract partial class AttachedLayout : BlazorBindings.AvaloniaBindings.Elements.BindableObject
    {
        static AttachedLayout()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public string LayoutId { get; set; }
        [Parameter] public EventCallback OnMeasureInvalidated { get; set; }
        [Parameter] public EventCallback OnArrangeInvalidated { get; set; }

        public new AL.AttachedLayout NativeControl => (AL.AttachedLayout)((BindableObject)this).NativeControl;


        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(LayoutId):
                    if (!Equals(LayoutId, value))
                    {
                        LayoutId = (string)value;
                        NativeControl.LayoutId = LayoutId;
                    }
                    break;
                case nameof(OnMeasureInvalidated):
                    if (!Equals(OnMeasureInvalidated, value))
                    {
                        void NativeControlMeasureInvalidated(object sender, EventArgs e) => InvokeEventCallback(OnMeasureInvalidated);

                        OnMeasureInvalidated = (EventCallback)value;
                        NativeControl.MeasureInvalidated -= NativeControlMeasureInvalidated;
                        NativeControl.MeasureInvalidated += NativeControlMeasureInvalidated;
                    }
                    break;
                case nameof(OnArrangeInvalidated):
                    if (!Equals(OnArrangeInvalidated, value))
                    {
                        void NativeControlArrangeInvalidated(object sender, EventArgs e) => InvokeEventCallback(OnArrangeInvalidated);

                        OnArrangeInvalidated = (EventCallback)value;
                        NativeControl.ArrangeInvalidated -= NativeControlArrangeInvalidated;
                        NativeControl.ArrangeInvalidated += NativeControlArrangeInvalidated;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
