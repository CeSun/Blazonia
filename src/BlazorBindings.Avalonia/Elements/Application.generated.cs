// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using A = Avalonia;

#pragma warning disable CA2252

namespace BlazorBindings.Avalonia.Elements
{
    /// <summary>
    /// Encapsulates a Avalonia application.
    /// </summary>
    public partial class Application : AvaloniaObject
    {
        static Application()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Application lifetime, use it for things like setting the main window and exiting the app from code Currently supported lifetimes are: - <see cref="T:Avalonia.Controls.ApplicationLifetimes.IClassicDesktopStyleApplicationLifetime" /> - <see cref="T:Avalonia.Controls.ApplicationLifetimes.ISingleViewApplicationLifetime" /> - <see cref="T:Avalonia.Controls.ApplicationLifetimes.IControlledApplicationLifetime" /> - <see cref="T:Avalonia.Controls.ApplicationLifetimes.IActivatableApplicationLifetime" />
        /// </summary>
        [Parameter] public AC.ApplicationLifetimes.IApplicationLifetime ApplicationLifetime { get; set; }
        /// <summary>
        /// Gets or sets the Applications's data context.
        /// </summary>
        [Parameter] public object DataContext { get; set; }
        /// <summary>
        /// Application name to be used for various platform-specific purposes
        /// </summary>
        [Parameter] public string Name { get; set; }
        [Parameter] public A.Styling.ThemeVariant RequestedThemeVariant { get; set; }
        /// <summary>
        /// Gets the application's global resource dictionary.
        /// </summary>
        [Parameter] public AC.IResourceDictionary Resources { get; set; }
        [Parameter] public EventCallback<AC.IResourceDictionary> ResourcesChanged { get; set; }
        [Parameter] public EventCallback<A.UrlOpenedEventArgs> OnUrlsOpened { get; set; }
        [Parameter] public EventCallback OnActualThemeVariantChanged { get; set; }

        public new A.Application NativeControl => (A.Application)((AvaloniaObject)this).NativeControl;

        protected override A.Application CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(ApplicationLifetime):
                    if (!Equals(ApplicationLifetime, value))
                    {
                        ApplicationLifetime = (AC.ApplicationLifetimes.IApplicationLifetime)value;
                        NativeControl.ApplicationLifetime = ApplicationLifetime;
                    }
                    break;
                case nameof(DataContext):
                    if (!Equals(DataContext, value))
                    {
                        DataContext = (object)value;
                        NativeControl.DataContext = DataContext;
                    }
                    break;
                case nameof(Name):
                    if (!Equals(Name, value))
                    {
                        Name = (string)value;
                        NativeControl.Name = Name;
                    }
                    break;
                case nameof(RequestedThemeVariant):
                    if (!Equals(RequestedThemeVariant, value))
                    {
                        RequestedThemeVariant = (A.Styling.ThemeVariant)value;
                        NativeControl.RequestedThemeVariant = RequestedThemeVariant;
                    }
                    break;
                case nameof(Resources):
                    if (!Equals(Resources, value))
                    {
                        Resources = (AC.IResourceDictionary)value;
                        NativeControl.Resources = Resources;
                    }
                    break;
                case nameof(ResourcesChanged):
                    if (!Equals(ResourcesChanged, value))
                    {
                        void NativeControlResourcesChanged(object sender, AC.ResourcesChangedEventArgs e)
                        {
                            var value = NativeControl.Resources;
                            Resources = value;
                            InvokeEventCallback(ResourcesChanged, value);
                        }

                        ResourcesChanged = (EventCallback<AC.IResourceDictionary>)value;
                        NativeControl.ResourcesChanged -= NativeControlResourcesChanged;
                        NativeControl.ResourcesChanged += NativeControlResourcesChanged;
                    }
                    break;
                case nameof(OnUrlsOpened):
                    if (!Equals(OnUrlsOpened, value))
                    {
                        void NativeControlUrlsOpened(object sender, A.UrlOpenedEventArgs e) => InvokeEventCallback(OnUrlsOpened, e);

                        OnUrlsOpened = (EventCallback<A.UrlOpenedEventArgs>)value;
                        NativeControl.UrlsOpened -= NativeControlUrlsOpened;
                        NativeControl.UrlsOpened += NativeControlUrlsOpened;
                    }
                    break;
                case nameof(OnActualThemeVariantChanged):
                    if (!Equals(OnActualThemeVariantChanged, value))
                    {
                        void NativeControlActualThemeVariantChanged(object sender, EventArgs e) => InvokeEventCallback(OnActualThemeVariantChanged);

                        OnActualThemeVariantChanged = (EventCallback)value;
                        NativeControl.ActualThemeVariantChanged -= NativeControlActualThemeVariantChanged;
                        NativeControl.ActualThemeVariantChanged += NativeControlActualThemeVariantChanged;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
