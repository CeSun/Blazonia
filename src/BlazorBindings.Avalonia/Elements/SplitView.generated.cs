// <auto-generated>
//     This code was generated by a BlazorBindings.Avalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using Microsoft.AspNetCore.Components.Rendering;

#pragma warning disable CA2252

namespace BlazorBindings.AvaloniaBindings.Elements
{
    /// <summary>
    /// A control with two views: A collapsible pane and an area for content
    /// </summary>
    public partial class SplitView : ContentControl
    {
        static SplitView()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the length of the pane when in <see cref="F:Avalonia.Controls.SplitViewDisplayMode.CompactOverlay" /> or <see cref="F:Avalonia.Controls.SplitViewDisplayMode.CompactInline" /> mode
        /// </summary>
        [Parameter] public double? CompactPaneLength { get; set; }
        /// <summary>
        /// Gets or sets the <see cref="T:Avalonia.Controls.SplitViewDisplayMode" /> for the SplitView
        /// </summary>
        [Parameter] public AC.SplitViewDisplayMode? DisplayMode { get; set; }
        /// <summary>
        /// Gets or sets whether the pane is open or closed
        /// </summary>
        [Parameter] public bool? IsPaneOpen { get; set; }
        /// <summary>
        /// Gets or sets the length of the pane when open
        /// </summary>
        [Parameter] public double? OpenPaneLength { get; set; }
        /// <summary>
        /// Gets or sets the Pane for the SplitView
        /// </summary>
        [Parameter] public object Pane { get; set; }
        /// <summary>
        /// Gets or sets the background of the pane
        /// </summary>
        [Parameter] public global::Avalonia.Media.IBrush PaneBackground { get; set; }
        /// <summary>
        /// Gets or sets the <see cref="T:Avalonia.Controls.SplitViewPanePlacement" /> for the SplitView
        /// </summary>
        [Parameter] public AC.SplitViewPanePlacement? PanePlacement { get; set; }
        /// <summary>
        /// Gets or sets whether WinUI equivalent LightDismissOverlayMode is enabled <para>When enabled, and the pane is open in Overlay or CompactOverlay mode, the contents of the <see cref="T:Avalonia.Controls.SplitView" /> are darkened to visually separate the open pane and the rest of the <see cref="T:Avalonia.Controls.SplitView" />.</para>
        /// </summary>
        [Parameter] public bool? UseLightDismissOverlayMode { get; set; }
        /// <summary>
        /// Gets or sets the data template used to display the header content of the control.
        /// </summary>
        [Parameter] public RenderFragment PaneTemplate { get; set; }
        [Parameter] public EventCallback<global::Avalonia.Interactivity.RoutedEventArgs> OnPaneClosed { get; set; }
        [Parameter] public EventCallback<global::Avalonia.Interactivity.CancelRoutedEventArgs> OnPaneClosing { get; set; }
        [Parameter] public EventCallback<global::Avalonia.Interactivity.RoutedEventArgs> OnPaneOpened { get; set; }
        [Parameter] public EventCallback<global::Avalonia.Interactivity.CancelRoutedEventArgs> OnPaneOpening { get; set; }

        public new AC.SplitView NativeControl => (AC.SplitView)((BindableObject)this).NativeControl;

        protected override AC.SplitView CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(CompactPaneLength):
                    if (!Equals(CompactPaneLength, value))
                    {
                        CompactPaneLength = (double?)value;
                        NativeControl.CompactPaneLength = CompactPaneLength ?? (double)AC.SplitView.CompactPaneLengthProperty.GetDefaultValue(AC.SplitView.CompactPaneLengthProperty.OwnerType);
                    }
                    break;
                case nameof(DisplayMode):
                    if (!Equals(DisplayMode, value))
                    {
                        DisplayMode = (AC.SplitViewDisplayMode?)value;
                        NativeControl.DisplayMode = DisplayMode ?? (AC.SplitViewDisplayMode)AC.SplitView.DisplayModeProperty.GetDefaultValue(AC.SplitView.DisplayModeProperty.OwnerType);
                    }
                    break;
                case nameof(IsPaneOpen):
                    if (!Equals(IsPaneOpen, value))
                    {
                        IsPaneOpen = (bool?)value;
                        NativeControl.IsPaneOpen = IsPaneOpen ?? (bool)AC.SplitView.IsPaneOpenProperty.GetDefaultValue(AC.SplitView.IsPaneOpenProperty.OwnerType);
                    }
                    break;
                case nameof(OpenPaneLength):
                    if (!Equals(OpenPaneLength, value))
                    {
                        OpenPaneLength = (double?)value;
                        NativeControl.OpenPaneLength = OpenPaneLength ?? (double)AC.SplitView.OpenPaneLengthProperty.GetDefaultValue(AC.SplitView.OpenPaneLengthProperty.OwnerType);
                    }
                    break;
                case nameof(Pane):
                    if (!Equals(Pane, value))
                    {
                        Pane = (object)value;
                        NativeControl.Pane = Pane;
                    }
                    break;
                case nameof(PaneBackground):
                    if (!Equals(PaneBackground, value))
                    {
                        PaneBackground = (global::Avalonia.Media.IBrush)value;
                        NativeControl.PaneBackground = PaneBackground;
                    }
                    break;
                case nameof(PanePlacement):
                    if (!Equals(PanePlacement, value))
                    {
                        PanePlacement = (AC.SplitViewPanePlacement?)value;
                        NativeControl.PanePlacement = PanePlacement ?? (AC.SplitViewPanePlacement)AC.SplitView.PanePlacementProperty.GetDefaultValue(AC.SplitView.PanePlacementProperty.OwnerType);
                    }
                    break;
                case nameof(UseLightDismissOverlayMode):
                    if (!Equals(UseLightDismissOverlayMode, value))
                    {
                        UseLightDismissOverlayMode = (bool?)value;
                        NativeControl.UseLightDismissOverlayMode = UseLightDismissOverlayMode ?? (bool)AC.SplitView.UseLightDismissOverlayModeProperty.GetDefaultValue(AC.SplitView.UseLightDismissOverlayModeProperty.OwnerType);
                    }
                    break;
                case nameof(PaneTemplate):
                    PaneTemplate = (RenderFragment)value;
                    break;
                case nameof(OnPaneClosed):
                    if (!Equals(OnPaneClosed, value))
                    {
                        void NativeControlPaneClosed(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => InvokeEventCallback(OnPaneClosed, e);

                        OnPaneClosed = (EventCallback<global::Avalonia.Interactivity.RoutedEventArgs>)value;
                        NativeControl.PaneClosed -= NativeControlPaneClosed;
                        NativeControl.PaneClosed += NativeControlPaneClosed;
                    }
                    break;
                case nameof(OnPaneClosing):
                    if (!Equals(OnPaneClosing, value))
                    {
                        void NativeControlPaneClosing(object sender, global::Avalonia.Interactivity.CancelRoutedEventArgs e) => InvokeEventCallback(OnPaneClosing, e);

                        OnPaneClosing = (EventCallback<global::Avalonia.Interactivity.CancelRoutedEventArgs>)value;
                        NativeControl.PaneClosing -= NativeControlPaneClosing;
                        NativeControl.PaneClosing += NativeControlPaneClosing;
                    }
                    break;
                case nameof(OnPaneOpened):
                    if (!Equals(OnPaneOpened, value))
                    {
                        void NativeControlPaneOpened(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => InvokeEventCallback(OnPaneOpened, e);

                        OnPaneOpened = (EventCallback<global::Avalonia.Interactivity.RoutedEventArgs>)value;
                        NativeControl.PaneOpened -= NativeControlPaneOpened;
                        NativeControl.PaneOpened += NativeControlPaneOpened;
                    }
                    break;
                case nameof(OnPaneOpening):
                    if (!Equals(OnPaneOpening, value))
                    {
                        void NativeControlPaneOpening(object sender, global::Avalonia.Interactivity.CancelRoutedEventArgs e) => InvokeEventCallback(OnPaneOpening, e);

                        OnPaneOpening = (EventCallback<global::Avalonia.Interactivity.CancelRoutedEventArgs>)value;
                        NativeControl.PaneOpening -= NativeControlPaneOpening;
                        NativeControl.PaneOpening += NativeControlPaneOpening;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddDataTemplateProperty<AC.SplitView>(builder, sequence++, PaneTemplate,
                (nativeControl, nativeTemplate) => nativeControl.PaneTemplate = nativeTemplate);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
