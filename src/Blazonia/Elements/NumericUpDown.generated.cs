// <auto-generated>
//     This code was generated by a BlazorBindingsAvalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System.Globalization;

#pragma warning disable CA2252

namespace Blazonia.Components
{
    /// <summary>
    /// Control that represents a TextBox with button spinners that allow incrementing and decrementing numeric values.
    /// </summary>
    public partial class NumericUpDown : Blazonia.Components.Primitives.TemplatedControl
    {
        static NumericUpDown()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the ability to perform increment/decrement operations via the keyboard, button spinners, or mouse wheel.
        /// </summary>
        [Parameter] public bool? AllowSpin { get; set; }
        /// <summary>
        /// Gets or sets current location of the <see cref="T:Avalonia.Controls.ButtonSpinner" />.
        /// </summary>
        [Parameter] public AC.Location? ButtonSpinnerLocation { get; set; }
        /// <summary>
        /// Gets or sets if the value should be clipped when minimum/maximum is reached.
        /// </summary>
        [Parameter] public bool? ClipValueToMinMax { get; set; }
        /// <summary>
        /// Gets or sets the display format of the <see cref="P:Avalonia.Controls.NumericUpDown.Value" />.
        /// </summary>
        [Parameter] public string FormatString { get; set; }
        /// <summary>
        /// Gets or sets the horizontal alignment of the content within the control.
        /// </summary>
        [Parameter] public global::Avalonia.Layout.HorizontalAlignment? HorizontalContentAlignment { get; set; }
        /// <summary>
        /// Gets or sets the amount in which to increment the <see cref="P:Avalonia.Controls.NumericUpDown.Value" />.
        /// </summary>
        [Parameter] public decimal? Increment { get; set; }
        /// <summary>
        /// Gets or sets custom content that is positioned on the left side of the text layout box
        /// </summary>
        [Parameter] public object InnerLeftContent { get; set; }
        /// <summary>
        /// Gets or sets custom content that is positioned on the right side of the text layout box
        /// </summary>
        [Parameter] public object InnerRightContent { get; set; }
        /// <summary>
        /// Gets or sets if the control is read only.
        /// </summary>
        [Parameter] public bool? IsReadOnly { get; set; }
        /// <summary>
        /// Gets or sets the maximum allowed value.
        /// </summary>
        [Parameter] public decimal? Maximum { get; set; }
        /// <summary>
        /// Gets or sets the minimum allowed value.
        /// </summary>
        [Parameter] public decimal? Minimum { get; set; }
        /// <summary>
        /// Gets or sets the current NumberFormatInfo
        /// </summary>
        [Parameter] public NumberFormatInfo NumberFormat { get; set; }
        /// <summary>
        /// Gets or sets the parsing style (AllowLeadingWhite, Float, AllowHexSpecifier, ...). By default, Any. Note that Hex style does not work with decimal. For hexadecimal display, use <see cref="P:Avalonia.Controls.NumericUpDown.TextConverter" />.
        /// </summary>
        [Parameter] public NumberStyles? ParsingNumberStyle { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the spin buttons should be shown.
        /// </summary>
        [Parameter] public bool? ShowButtonSpinner { get; set; }
        /// <summary>
        /// Gets or sets the formatted string representation of the value.
        /// </summary>
        [Parameter] public string Text { get; set; }
        /// <summary>
        /// Gets or sets the <see cref="T:Avalonia.Media.TextAlignment" /> of the <see cref="T:Avalonia.Controls.NumericUpDown" />
        /// </summary>
        [Parameter] public global::Avalonia.Media.TextAlignment? TextAlignment { get; set; }
        /// <summary>
        /// Gets or sets the custom bidirectional Text-Value converter. Non-null converter overrides <see cref="P:Avalonia.Controls.NumericUpDown.ParsingNumberStyle" />, providing finer control over string representation of the underlying value.
        /// </summary>
        [Parameter] public global::Avalonia.Data.Converters.IValueConverter TextConverter { get; set; }
        /// <summary>
        /// Gets or sets the value.
        /// </summary>
        [Parameter] public Nullable<decimal> Value { get; set; }
        /// <summary>
        /// Gets or sets the vertical alignment of the content within the control.
        /// </summary>
        [Parameter] public global::Avalonia.Layout.VerticalAlignment? VerticalContentAlignment { get; set; }
        /// <summary>
        /// Gets or sets the object to use as a watermark if the <see cref="P:Avalonia.Controls.NumericUpDown.Value" /> is null.
        /// </summary>
        [Parameter] public string Watermark { get; set; }
        [Parameter] public EventCallback<AC.SpinEventArgs> OnSpinned { get; set; }
        [Parameter] public EventCallback<Nullable<decimal>> ValueChanged { get; set; }

        public new AC.NumericUpDown NativeControl => (AC.NumericUpDown)((AvaloniaObject)this).NativeControl;

        protected override AvaloniaBindableObject CreateNativeElement() => new AC.NumericUpDown();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(AllowSpin):
                    if (!Equals(AllowSpin, value))
                    {
                        AllowSpin = (bool?)value;
                        NativeControl.AllowSpin = AllowSpin ?? (bool)AC.NumericUpDown.AllowSpinProperty.GetDefaultValue(AC.NumericUpDown.AllowSpinProperty.OwnerType);
                    }
                    break;
                case nameof(ButtonSpinnerLocation):
                    if (!Equals(ButtonSpinnerLocation, value))
                    {
                        ButtonSpinnerLocation = (AC.Location?)value;
                        NativeControl.ButtonSpinnerLocation = ButtonSpinnerLocation ?? (AC.Location)AC.NumericUpDown.ButtonSpinnerLocationProperty.GetDefaultValue(AC.NumericUpDown.ButtonSpinnerLocationProperty.OwnerType);
                    }
                    break;
                case nameof(ClipValueToMinMax):
                    if (!Equals(ClipValueToMinMax, value))
                    {
                        ClipValueToMinMax = (bool?)value;
                        NativeControl.ClipValueToMinMax = ClipValueToMinMax ?? (bool)AC.NumericUpDown.ClipValueToMinMaxProperty.GetDefaultValue(AC.NumericUpDown.ClipValueToMinMaxProperty.OwnerType);
                    }
                    break;
                case nameof(FormatString):
                    if (!Equals(FormatString, value))
                    {
                        FormatString = (string)value;
                        NativeControl.FormatString = FormatString;
                    }
                    break;
                case nameof(HorizontalContentAlignment):
                    if (!Equals(HorizontalContentAlignment, value))
                    {
                        HorizontalContentAlignment = (global::Avalonia.Layout.HorizontalAlignment?)value;
                        NativeControl.HorizontalContentAlignment = HorizontalContentAlignment ?? (global::Avalonia.Layout.HorizontalAlignment)AC.NumericUpDown.HorizontalContentAlignmentProperty.GetDefaultValue(AC.NumericUpDown.HorizontalContentAlignmentProperty.OwnerType);
                    }
                    break;
                case nameof(Increment):
                    if (!Equals(Increment, value))
                    {
                        Increment = (decimal?)value;
                        NativeControl.Increment = Increment ?? (decimal)AC.NumericUpDown.IncrementProperty.GetDefaultValue(AC.NumericUpDown.IncrementProperty.OwnerType);
                    }
                    break;
                case nameof(InnerLeftContent):
                    if (!Equals(InnerLeftContent, value))
                    {
                        InnerLeftContent = (object)value;
                        NativeControl.InnerLeftContent = InnerLeftContent;
                    }
                    break;
                case nameof(InnerRightContent):
                    if (!Equals(InnerRightContent, value))
                    {
                        InnerRightContent = (object)value;
                        NativeControl.InnerRightContent = InnerRightContent;
                    }
                    break;
                case nameof(IsReadOnly):
                    if (!Equals(IsReadOnly, value))
                    {
                        IsReadOnly = (bool?)value;
                        NativeControl.IsReadOnly = IsReadOnly ?? (bool)AC.NumericUpDown.IsReadOnlyProperty.GetDefaultValue(AC.NumericUpDown.IsReadOnlyProperty.OwnerType);
                    }
                    break;
                case nameof(Maximum):
                    if (!Equals(Maximum, value))
                    {
                        Maximum = (decimal?)value;
                        NativeControl.Maximum = Maximum ?? (decimal)AC.NumericUpDown.MaximumProperty.GetDefaultValue(AC.NumericUpDown.MaximumProperty.OwnerType);
                    }
                    break;
                case nameof(Minimum):
                    if (!Equals(Minimum, value))
                    {
                        Minimum = (decimal?)value;
                        NativeControl.Minimum = Minimum ?? (decimal)AC.NumericUpDown.MinimumProperty.GetDefaultValue(AC.NumericUpDown.MinimumProperty.OwnerType);
                    }
                    break;
                case nameof(NumberFormat):
                    if (!Equals(NumberFormat, value))
                    {
                        NumberFormat = (NumberFormatInfo)value;
                        NativeControl.NumberFormat = NumberFormat;
                    }
                    break;
                case nameof(ParsingNumberStyle):
                    if (!Equals(ParsingNumberStyle, value))
                    {
                        ParsingNumberStyle = (NumberStyles?)value;
                        NativeControl.ParsingNumberStyle = ParsingNumberStyle ?? (NumberStyles)AC.NumericUpDown.ParsingNumberStyleProperty.GetDefaultValue(AC.NumericUpDown.ParsingNumberStyleProperty.OwnerType);
                    }
                    break;
                case nameof(ShowButtonSpinner):
                    if (!Equals(ShowButtonSpinner, value))
                    {
                        ShowButtonSpinner = (bool?)value;
                        NativeControl.ShowButtonSpinner = ShowButtonSpinner ?? (bool)AC.NumericUpDown.ShowButtonSpinnerProperty.GetDefaultValue(AC.NumericUpDown.ShowButtonSpinnerProperty.OwnerType);
                    }
                    break;
                case nameof(Text):
                    if (!Equals(Text, value))
                    {
                        Text = (string)value;
                        NativeControl.Text = Text;
                    }
                    break;
                case nameof(TextAlignment):
                    if (!Equals(TextAlignment, value))
                    {
                        TextAlignment = (global::Avalonia.Media.TextAlignment?)value;
                        NativeControl.TextAlignment = TextAlignment ?? (global::Avalonia.Media.TextAlignment)AC.NumericUpDown.TextAlignmentProperty.GetDefaultValue(AC.NumericUpDown.TextAlignmentProperty.OwnerType);
                    }
                    break;
                case nameof(TextConverter):
                    if (!Equals(TextConverter, value))
                    {
                        TextConverter = (global::Avalonia.Data.Converters.IValueConverter)value;
                        NativeControl.TextConverter = TextConverter;
                    }
                    break;
                case nameof(Value):
                    if (!Equals(Value, value))
                    {
                        Value = (Nullable<decimal>)value;
                        NativeControl.Value = Value;
                    }
                    break;
                case nameof(VerticalContentAlignment):
                    if (!Equals(VerticalContentAlignment, value))
                    {
                        VerticalContentAlignment = (global::Avalonia.Layout.VerticalAlignment?)value;
                        NativeControl.VerticalContentAlignment = VerticalContentAlignment ?? (global::Avalonia.Layout.VerticalAlignment)AC.NumericUpDown.VerticalContentAlignmentProperty.GetDefaultValue(AC.NumericUpDown.VerticalContentAlignmentProperty.OwnerType);
                    }
                    break;
                case nameof(Watermark):
                    if (!Equals(Watermark, value))
                    {
                        Watermark = (string)value;
                        NativeControl.Watermark = Watermark;
                    }
                    break;
                case nameof(OnSpinned):
                    if (!Equals(OnSpinned, value))
                    {
                        void NativeControlSpinned(object sender, AC.SpinEventArgs e) => InvokeEventCallback(OnSpinned, e);

                        OnSpinned = (EventCallback<AC.SpinEventArgs>)value;
                        NativeControl.Spinned -= NativeControlSpinned;
                        NativeControl.Spinned += NativeControlSpinned;
                    }
                    break;
                case nameof(ValueChanged):
                    if (!Equals(ValueChanged, value))
                    {
                        void NativeControlValueChanged(object sender, AC.NumericUpDownValueChangedEventArgs e)
                        {
                            var value = NativeControl.Value;
                            Value = value;
                            InvokeEventCallback(ValueChanged, value);
                        }

                        ValueChanged = (EventCallback<Nullable<decimal>>)value;
                        NativeControl.ValueChanged -= NativeControlValueChanged;
                        NativeControl.ValueChanged += NativeControlValueChanged;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
