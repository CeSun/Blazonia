// <auto-generated>
//     This code was generated by a BlazorBindingsAvalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>



#pragma warning disable CA2252

namespace Blazonia.Components
{
    /// <summary>
    /// Displays <see cref="P:Avalonia.Controls.ContentControl.Content" /> according to an <see cref="T:Avalonia.Controls.Templates.IDataTemplate" />, using a <see cref="P:Avalonia.Controls.TransitioningContentControl.PageTransition" /> to move between the old and new content.
    /// </summary>
    public partial class TransitioningContentControl : ContentControl
    {
        static TransitioningContentControl()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value indicating whether the control will be animated in the reverse direction.
        /// </summary>
        [Parameter] public bool? IsTransitionReversed { get; set; }
        /// <summary>
        /// Gets or sets the animation played when content appears and disappears.
        /// </summary>
        [Parameter] public global::Avalonia.Animation.IPageTransition PageTransition { get; set; }
        [Parameter] public EventCallback<AC.TransitionCompletedEventArgs> OnTransitionCompleted { get; set; }

        public new AC.TransitioningContentControl NativeControl => (AC.TransitioningContentControl)((AvaloniaObject)this).NativeControl;

        protected override AvaloniaBindableObject CreateNativeElement() => new AC.TransitioningContentControl();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(IsTransitionReversed):
                    if (!Equals(IsTransitionReversed, value))
                    {
                        IsTransitionReversed = (bool?)value;
                        NativeControl.IsTransitionReversed = IsTransitionReversed ?? (bool)AC.TransitioningContentControl.IsTransitionReversedProperty.GetDefaultValue(AC.TransitioningContentControl.IsTransitionReversedProperty.OwnerType);
                    }
                    break;
                case nameof(PageTransition):
                    if (!Equals(PageTransition, value))
                    {
                        PageTransition = (global::Avalonia.Animation.IPageTransition)value;
                        NativeControl.PageTransition = PageTransition;
                    }
                    break;
                case nameof(OnTransitionCompleted):
                    if (!Equals(OnTransitionCompleted, value))
                    {
                        void NativeControlTransitionCompleted(object sender, AC.TransitionCompletedEventArgs e) => InvokeEventCallback(OnTransitionCompleted, e);

                        OnTransitionCompleted = (EventCallback<AC.TransitionCompletedEventArgs>)value;
                        NativeControl.TransitionCompleted -= NativeControlTransitionCompleted;
                        NativeControl.TransitionCompleted += NativeControlTransitionCompleted;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
