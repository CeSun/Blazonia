// <auto-generated>
//     This code was generated by a BlazorBindingsAvalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>



#pragma warning disable CA2252

namespace Blazonia.Components
{
    /// <summary>
    /// An item in a <see cref="T:Avalonia.Controls.TreeView" />.
    /// </summary>
    public partial class TreeViewItem<T> : Blazonia.Components.Primitives.HeaderedItemsControl<T>
    {
        static TreeViewItem()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value indicating whether the item is expanded to show its children.
        /// </summary>
        [Parameter] public bool? IsExpanded { get; set; }
        /// <summary>
        /// Gets or sets the selection state of the item.
        /// </summary>
        [Parameter] public bool? IsSelected { get; set; }
        [Parameter] public EventCallback<bool?> IsExpandedChanged { get; set; }
        [Parameter] public EventCallback<global::Avalonia.Interactivity.RoutedEventArgs> OnCollapsed { get; set; }

        public new AC.TreeViewItem NativeControl => (AC.TreeViewItem)((AvaloniaObject)this).NativeControl;

        protected override AC.TreeViewItem CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(IsExpanded):
                    if (!Equals(IsExpanded, value))
                    {
                        IsExpanded = (bool?)value;
                        NativeControl.IsExpanded = IsExpanded ?? (bool)AC.TreeViewItem.IsExpandedProperty.GetDefaultValue(AC.TreeViewItem.IsExpandedProperty.OwnerType);
                    }
                    break;
                case nameof(IsSelected):
                    if (!Equals(IsSelected, value))
                    {
                        IsSelected = (bool?)value;
                        NativeControl.IsSelected = IsSelected ?? (bool)AC.TreeViewItem.IsSelectedProperty.GetDefaultValue(AC.TreeViewItem.IsSelectedProperty.OwnerType);
                    }
                    break;
                case nameof(IsExpandedChanged):
                    if (!Equals(IsExpandedChanged, value))
                    {
                        void NativeControlExpanded(object sender, global::Avalonia.Interactivity.RoutedEventArgs e)
                        {
                            var value = NativeControl.IsExpanded is bool item ? item : default(bool?);
                            IsExpanded = value;
                            InvokeEventCallback(IsExpandedChanged, value);
                        }

                        IsExpandedChanged = (EventCallback<bool?>)value;
                        NativeControl.Expanded -= NativeControlExpanded;
                        NativeControl.Expanded += NativeControlExpanded;
                    }
                    break;
                case nameof(OnCollapsed):
                    if (!Equals(OnCollapsed, value))
                    {
                        void NativeControlCollapsed(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => InvokeEventCallback(OnCollapsed, e);

                        OnCollapsed = (EventCallback<global::Avalonia.Interactivity.RoutedEventArgs>)value;
                        NativeControl.Collapsed -= NativeControlCollapsed;
                        NativeControl.Collapsed += NativeControlCollapsed;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
