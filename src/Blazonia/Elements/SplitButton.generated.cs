// <auto-generated>
//     This code was generated by a BlazorBindingsAvalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using System.Windows.Input;

#pragma warning disable CA2252

namespace Blazonia.Components
{
    /// <summary>
    /// A button with primary and secondary parts that can each be pressed separately. The primary part behaves like a <see cref="T:Avalonia.Controls.Button" /> and the secondary part opens a flyout.
    /// </summary>
    public partial class SplitButton : ContentControl
    {
        static SplitButton()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the <see cref="T:System.Windows.Input.ICommand" /> invoked when the primary part is pressed.
        /// </summary>
        [Parameter] public ICommand Command { get; set; }
        /// <summary>
        /// Gets or sets a parameter to be passed to the <see cref="P:Avalonia.Controls.SplitButton.Command" />.
        /// </summary>
        [Parameter] public object CommandParameter { get; set; }
        /// <summary>
        /// Gets or sets the <see cref="T:Avalonia.Controls.Primitives.FlyoutBase" /> that is shown when the secondary part is pressed.
        /// </summary>
        [Parameter] public AC.Primitives.FlyoutBase Flyout { get; set; }
        /// <summary>
        /// Gets or sets an <see cref="T:Avalonia.Input.KeyGesture" /> associated with this control
        /// </summary>
        [Parameter] public OneOf.OneOf<global::Avalonia.Input.KeyGesture, string> HotKey { get; set; }
        [Parameter] public EventCallback<global::Avalonia.Interactivity.RoutedEventArgs> OnClick { get; set; }

        public new AC.SplitButton NativeControl => (AC.SplitButton)((AvaloniaObject)this).NativeControl;

        protected override AvaloniaBindableObject CreateNativeElement() => new AC.SplitButton();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Command):
                    if (!Equals(Command, value))
                    {
                        Command = (ICommand)value;
                        NativeControl.Command = Command;
                    }
                    break;
                case nameof(CommandParameter):
                    if (!Equals(CommandParameter, value))
                    {
                        CommandParameter = (object)value;
                        NativeControl.CommandParameter = CommandParameter;
                    }
                    break;
                case nameof(Flyout):
                    if (!Equals(Flyout, value))
                    {
                        Flyout = (AC.Primitives.FlyoutBase)value;
                        NativeControl.Flyout = Flyout;
                    }
                    break;
                case nameof(HotKey):
                    if (!Equals(HotKey, value))
                    {
                        HotKey = (OneOf.OneOf<global::Avalonia.Input.KeyGesture,string>)value;
                        if (HotKey.IsT0)
                        {
                            NativeControl.HotKey = (global::Avalonia.Input.KeyGesture)HotKey.AsT0;
                        }
                        else 
                        {
                            NativeControl.HotKey = global::Avalonia.Input.KeyGesture.Parse(HotKey.AsT1);
                        }
                    }
                    break;
                case nameof(OnClick):
                    if (!Equals(OnClick, value))
                    {
                        void NativeControlClick(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => InvokeEventCallback(OnClick, e);

                        OnClick = (EventCallback<global::Avalonia.Interactivity.RoutedEventArgs>)value;
                        NativeControl.Click -= NativeControlClick;
                        NativeControl.Click += NativeControlClick;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
