// <auto-generated>
//     This code was generated by a BlazorBindingsAvalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using Microsoft.AspNetCore.Components.Rendering;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Threading;

#pragma warning disable CA2252

namespace Blazonia.Components
{
    /// <summary>
    /// Represents a control that provides a text box for user input and a drop-down that contains possible matches based on the input in the text box.
    /// </summary>
    public partial class AutoCompleteBox : Blazonia.Components.Primitives.TemplatedControl
    {
        static AutoCompleteBox()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public Func<string, CancellationToken, Task<IEnumerable<object>>> AsyncPopulator { get; set; }
        /// <summary>
        /// Gets or sets the caret index
        /// </summary>
        [Parameter] public int? CaretIndex { get; set; }
        /// <summary>
        /// Gets or sets how the text in the text box is used to filter items specified by the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" /> property for display in the drop-down.
        /// </summary>
        /// <value>
        /// One of the <see cref="T:Avalonia.Controls.AutoCompleteFilterMode" /> values The default is <see cref="F:Avalonia.Controls.AutoCompleteFilterMode.StartsWith" />.
        /// </value>
        [Parameter] public AC.AutoCompleteFilterMode? FilterMode { get; set; }
        /// <summary>
        /// Gets or sets custom content that is positioned on the left side of the text layout box
        /// </summary>
        [Parameter] public object InnerLeftContent { get; set; }
        /// <summary>
        /// Gets or sets custom content that is positioned on the right side of the text layout box
        /// </summary>
        [Parameter] public object InnerRightContent { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the drop-down portion of the control is open.
        /// </summary>
        /// <value>
        /// True if the drop-down is open; otherwise, false. The default is false.
        /// </value>
        [Parameter] public bool? IsDropDownOpen { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the first possible match found during the filtering process will be displayed automatically in the text box.
        /// </summary>
        /// <value>
        /// True if the first possible match found will be displayed automatically in the text box; otherwise, false. The default is false.
        /// </value>
        [Parameter] public bool? IsTextCompletionEnabled { get; set; }
        /// <summary>
        /// Gets or sets the custom method that uses user-entered text to filter the items specified by the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" /> property for display in the drop-down.
        /// </summary>
        /// <value>
        /// The custom method that uses the user-entered text to filter the items specified by the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" /> property. The default is null.
        /// </value>
        [Parameter] public AC.AutoCompleteFilterPredicate<object> ItemFilter { get; set; }
        /// <summary>
        /// Gets or sets the custom method that combines the user-entered text and one of the items specified by the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" />.
        /// </summary>
        /// <value>
        /// The custom method that combines the user-entered text and one of the items specified by the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" />.
        /// </value>
        [Parameter] public AC.AutoCompleteSelector<object> ItemSelector { get; set; }
        /// <summary>
        /// Gets or sets a collection that is used to generate the items for the drop-down portion of the <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.
        /// </summary>
        /// <value>
        /// The collection that is used to generate the items of the drop-down portion of the <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.
        /// </value>
        [Parameter] public IEnumerable ItemsSource { get; set; }
        /// <summary>
        /// Gets or sets the maximum height of the drop-down portion of the <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.
        /// </summary>
        /// <value>
        /// The maximum height of the drop-down portion of the <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control. The default is <see cref="F:System.Double.PositiveInfinity" />.
        /// </value>
        [Parameter] public double? MaxDropDownHeight { get; set; }
        /// <summary>
        /// Gets or sets the maximum number of characters that the <see cref="T:Avalonia.Controls.AutoCompleteBox" /> can accept. This constraint only applies for manually entered (user-inputted) text.
        /// </summary>
        [Parameter] public int? MaxLength { get; set; }
        /// <summary>
        /// Gets or sets the minimum delay, after text is typed in the text box before the <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control populates the list of possible matches in the drop-down.
        /// </summary>
        /// <value>
        /// The minimum delay, after text is typed in the text box, but before the <see cref="T:Avalonia.Controls.AutoCompleteBox" /> populates the list of possible matches in the drop-down. The default is 0.
        /// </value>
        [Parameter] public TimeSpan? MinimumPopulateDelay { get; set; }
        /// <summary>
        /// Gets or sets the minimum number of characters required to be entered in the text box before the <see cref="T:Avalonia.Controls.AutoCompleteBox" /> displays possible matches.
        /// </summary>
        /// <value>
        /// The minimum number of characters to be entered in the text box before the <see cref="T:Avalonia.Controls.AutoCompleteBox" /> displays possible matches. The default is 1.
        /// </value>
        [Parameter] public int? MinimumPrefixLength { get; set; }
        /// <summary>
        /// Gets or sets the selected item in the drop-down.
        /// </summary>
        /// <value>
        /// The selected item in the drop-down.
        /// </value>
        [Parameter] public object SelectedItem { get; set; }
        /// <summary>
        /// Gets or sets the text in the text box portion of the <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.
        /// </summary>
        /// <value>
        /// The text in the text box portion of the <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.
        /// </value>
        [Parameter] public string Text { get; set; }
        /// <summary>
        /// Gets or sets the custom method that uses the user-entered text to filter items specified by the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" /> property in a text-based way for display in the drop-down.
        /// </summary>
        /// <value>
        /// The custom method that uses the user-entered text to filter items specified by the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" /> property in a text-based way for display in the drop-down.
        /// </value>
        [Parameter] public AC.AutoCompleteFilterPredicate<string> TextFilter { get; set; }
        /// <summary>
        /// Gets or sets the custom method that combines the user-entered text and one of the items specified by the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" /> in a text-based way.
        /// </summary>
        /// <value>
        /// The custom method that combines the user-entered text and one of the items specified by the <see cref="P:Avalonia.Controls.AutoCompleteBox.ItemsSource" /> in a text-based way.
        /// </value>
        [Parameter] public AC.AutoCompleteSelector<string> TextSelector { get; set; }
        /// <summary>
        /// Gets or sets the <see cref="T:Avalonia.Data.Binding" /> that is used to get the values for display in the text portion of the <see cref="T:Avalonia.Controls.AutoCompleteBox" /> control.
        /// </summary>
        /// <value>
        /// The <see cref="T:Avalonia.Data.IBinding" /> object used when binding to a collection property.
        /// </value>
        [Parameter] public global::Avalonia.Data.IBinding ValueMemberBinding { get; set; }
        [Parameter] public string Watermark { get; set; }
        /// <summary>
        /// Gets or sets the <see cref="T:Avalonia.DataTemplate" /> used to display each item in the drop-down portion of the control.
        /// </summary>
        /// <value>
        /// The <see cref="T:Avalonia.DataTemplate" /> used to display each item in the drop-down. The default is null.
        /// </value>
        [Parameter] public RenderFragment ItemTemplate { get; set; }
        [Parameter] public EventCallback<string> TextChanged { get; set; }
        [Parameter] public EventCallback<AC.PopulatingEventArgs> OnPopulating { get; set; }
        [Parameter] public EventCallback<AC.PopulatedEventArgs> OnPopulated { get; set; }
        [Parameter] public EventCallback<CancelEventArgs> OnDropDownOpening { get; set; }
        [Parameter] public EventCallback OnDropDownOpened { get; set; }
        [Parameter] public EventCallback<CancelEventArgs> OnDropDownClosing { get; set; }
        [Parameter] public EventCallback OnDropDownClosed { get; set; }
        [Parameter] public EventCallback<AC.SelectionChangedEventArgs> OnSelectionChanged { get; set; }

        public new AC.AutoCompleteBox NativeControl => (AC.AutoCompleteBox)((AvaloniaObject)this).NativeControl;

        protected override AC.AutoCompleteBox CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(AsyncPopulator):
                    if (!Equals(AsyncPopulator, value))
                    {
                        AsyncPopulator = (Func<string, CancellationToken, Task<IEnumerable<object>>>)value;
                        NativeControl.AsyncPopulator = AsyncPopulator;
                    }
                    break;
                case nameof(CaretIndex):
                    if (!Equals(CaretIndex, value))
                    {
                        CaretIndex = (int?)value;
                        NativeControl.CaretIndex = CaretIndex ?? (int)AC.AutoCompleteBox.CaretIndexProperty.GetDefaultValue(AC.AutoCompleteBox.CaretIndexProperty.OwnerType);
                    }
                    break;
                case nameof(FilterMode):
                    if (!Equals(FilterMode, value))
                    {
                        FilterMode = (AC.AutoCompleteFilterMode?)value;
                        NativeControl.FilterMode = FilterMode ?? (AC.AutoCompleteFilterMode)AC.AutoCompleteBox.FilterModeProperty.GetDefaultValue(AC.AutoCompleteBox.FilterModeProperty.OwnerType);
                    }
                    break;
                case nameof(InnerLeftContent):
                    if (!Equals(InnerLeftContent, value))
                    {
                        InnerLeftContent = (object)value;
                        NativeControl.InnerLeftContent = InnerLeftContent;
                    }
                    break;
                case nameof(InnerRightContent):
                    if (!Equals(InnerRightContent, value))
                    {
                        InnerRightContent = (object)value;
                        NativeControl.InnerRightContent = InnerRightContent;
                    }
                    break;
                case nameof(IsDropDownOpen):
                    if (!Equals(IsDropDownOpen, value))
                    {
                        IsDropDownOpen = (bool?)value;
                        NativeControl.IsDropDownOpen = IsDropDownOpen ?? (bool)AC.AutoCompleteBox.IsDropDownOpenProperty.GetDefaultValue(AC.AutoCompleteBox.IsDropDownOpenProperty.OwnerType);
                    }
                    break;
                case nameof(IsTextCompletionEnabled):
                    if (!Equals(IsTextCompletionEnabled, value))
                    {
                        IsTextCompletionEnabled = (bool?)value;
                        NativeControl.IsTextCompletionEnabled = IsTextCompletionEnabled ?? (bool)AC.AutoCompleteBox.IsTextCompletionEnabledProperty.GetDefaultValue(AC.AutoCompleteBox.IsTextCompletionEnabledProperty.OwnerType);
                    }
                    break;
                case nameof(ItemFilter):
                    if (!Equals(ItemFilter, value))
                    {
                        ItemFilter = (AC.AutoCompleteFilterPredicate<object>)value;
                        NativeControl.ItemFilter = ItemFilter;
                    }
                    break;
                case nameof(ItemSelector):
                    if (!Equals(ItemSelector, value))
                    {
                        ItemSelector = (AC.AutoCompleteSelector<object>)value;
                        NativeControl.ItemSelector = ItemSelector;
                    }
                    break;
                case nameof(ItemsSource):
                    if (!Equals(ItemsSource, value))
                    {
                        ItemsSource = (IEnumerable)value;
                        NativeControl.ItemsSource = ItemsSource;
                    }
                    break;
                case nameof(MaxDropDownHeight):
                    if (!Equals(MaxDropDownHeight, value))
                    {
                        MaxDropDownHeight = (double?)value;
                        NativeControl.MaxDropDownHeight = MaxDropDownHeight ?? (double)AC.AutoCompleteBox.MaxDropDownHeightProperty.GetDefaultValue(AC.AutoCompleteBox.MaxDropDownHeightProperty.OwnerType);
                    }
                    break;
                case nameof(MaxLength):
                    if (!Equals(MaxLength, value))
                    {
                        MaxLength = (int?)value;
                        NativeControl.MaxLength = MaxLength ?? (int)AC.AutoCompleteBox.MaxLengthProperty.GetDefaultValue(AC.AutoCompleteBox.MaxLengthProperty.OwnerType);
                    }
                    break;
                case nameof(MinimumPopulateDelay):
                    if (!Equals(MinimumPopulateDelay, value))
                    {
                        MinimumPopulateDelay = (TimeSpan?)value;
                        NativeControl.MinimumPopulateDelay = MinimumPopulateDelay ?? (TimeSpan)AC.AutoCompleteBox.MinimumPopulateDelayProperty.GetDefaultValue(AC.AutoCompleteBox.MinimumPopulateDelayProperty.OwnerType);
                    }
                    break;
                case nameof(MinimumPrefixLength):
                    if (!Equals(MinimumPrefixLength, value))
                    {
                        MinimumPrefixLength = (int?)value;
                        NativeControl.MinimumPrefixLength = MinimumPrefixLength ?? (int)AC.AutoCompleteBox.MinimumPrefixLengthProperty.GetDefaultValue(AC.AutoCompleteBox.MinimumPrefixLengthProperty.OwnerType);
                    }
                    break;
                case nameof(SelectedItem):
                    if (!Equals(SelectedItem, value))
                    {
                        SelectedItem = (object)value;
                        NativeControl.SelectedItem = SelectedItem;
                    }
                    break;
                case nameof(Text):
                    if (!Equals(Text, value))
                    {
                        Text = (string)value;
                        NativeControl.Text = Text;
                    }
                    break;
                case nameof(TextFilter):
                    if (!Equals(TextFilter, value))
                    {
                        TextFilter = (AC.AutoCompleteFilterPredicate<string>)value;
                        NativeControl.TextFilter = TextFilter;
                    }
                    break;
                case nameof(TextSelector):
                    if (!Equals(TextSelector, value))
                    {
                        TextSelector = (AC.AutoCompleteSelector<string>)value;
                        NativeControl.TextSelector = TextSelector;
                    }
                    break;
                case nameof(ValueMemberBinding):
                    if (!Equals(ValueMemberBinding, value))
                    {
                        ValueMemberBinding = (global::Avalonia.Data.IBinding)value;
                        NativeControl.ValueMemberBinding = ValueMemberBinding;
                    }
                    break;
                case nameof(Watermark):
                    if (!Equals(Watermark, value))
                    {
                        Watermark = (string)value;
                        NativeControl.Watermark = Watermark;
                    }
                    break;
                case nameof(ItemTemplate):
                    ItemTemplate = (RenderFragment)value;
                    break;
                case nameof(TextChanged):
                    if (!Equals(TextChanged, value))
                    {
                        void NativeControlTextChanged(object sender, AC.TextChangedEventArgs e)
                        {
                            var value = NativeControl.Text;
                            Text = value;
                            InvokeEventCallback(TextChanged, value);
                        }

                        TextChanged = (EventCallback<string>)value;
                        NativeControl.TextChanged -= NativeControlTextChanged;
                        NativeControl.TextChanged += NativeControlTextChanged;
                    }
                    break;
                case nameof(OnPopulating):
                    if (!Equals(OnPopulating, value))
                    {
                        void NativeControlPopulating(object sender, AC.PopulatingEventArgs e) => InvokeEventCallback(OnPopulating, e);

                        OnPopulating = (EventCallback<AC.PopulatingEventArgs>)value;
                        NativeControl.Populating -= NativeControlPopulating;
                        NativeControl.Populating += NativeControlPopulating;
                    }
                    break;
                case nameof(OnPopulated):
                    if (!Equals(OnPopulated, value))
                    {
                        void NativeControlPopulated(object sender, AC.PopulatedEventArgs e) => InvokeEventCallback(OnPopulated, e);

                        OnPopulated = (EventCallback<AC.PopulatedEventArgs>)value;
                        NativeControl.Populated -= NativeControlPopulated;
                        NativeControl.Populated += NativeControlPopulated;
                    }
                    break;
                case nameof(OnDropDownOpening):
                    if (!Equals(OnDropDownOpening, value))
                    {
                        void NativeControlDropDownOpening(object sender, CancelEventArgs e) => InvokeEventCallback(OnDropDownOpening, e);

                        OnDropDownOpening = (EventCallback<CancelEventArgs>)value;
                        NativeControl.DropDownOpening -= NativeControlDropDownOpening;
                        NativeControl.DropDownOpening += NativeControlDropDownOpening;
                    }
                    break;
                case nameof(OnDropDownOpened):
                    if (!Equals(OnDropDownOpened, value))
                    {
                        void NativeControlDropDownOpened(object sender, EventArgs e) => InvokeEventCallback(OnDropDownOpened);

                        OnDropDownOpened = (EventCallback)value;
                        NativeControl.DropDownOpened -= NativeControlDropDownOpened;
                        NativeControl.DropDownOpened += NativeControlDropDownOpened;
                    }
                    break;
                case nameof(OnDropDownClosing):
                    if (!Equals(OnDropDownClosing, value))
                    {
                        void NativeControlDropDownClosing(object sender, CancelEventArgs e) => InvokeEventCallback(OnDropDownClosing, e);

                        OnDropDownClosing = (EventCallback<CancelEventArgs>)value;
                        NativeControl.DropDownClosing -= NativeControlDropDownClosing;
                        NativeControl.DropDownClosing += NativeControlDropDownClosing;
                    }
                    break;
                case nameof(OnDropDownClosed):
                    if (!Equals(OnDropDownClosed, value))
                    {
                        void NativeControlDropDownClosed(object sender, EventArgs e) => InvokeEventCallback(OnDropDownClosed);

                        OnDropDownClosed = (EventCallback)value;
                        NativeControl.DropDownClosed -= NativeControlDropDownClosed;
                        NativeControl.DropDownClosed += NativeControlDropDownClosed;
                    }
                    break;
                case nameof(OnSelectionChanged):
                    if (!Equals(OnSelectionChanged, value))
                    {
                        void NativeControlSelectionChanged(object sender, AC.SelectionChangedEventArgs e) => InvokeEventCallback(OnSelectionChanged, e);

                        OnSelectionChanged = (EventCallback<AC.SelectionChangedEventArgs>)value;
                        NativeControl.SelectionChanged -= NativeControlSelectionChanged;
                        NativeControl.SelectionChanged += NativeControlSelectionChanged;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddDataTemplateProperty<AC.AutoCompleteBox>(builder, sequence++, ItemTemplate,
                (nativeControl, nativeTemplate) => nativeControl.ItemTemplate = nativeTemplate);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
