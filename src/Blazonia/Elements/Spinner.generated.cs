// <auto-generated>
//     This code was generated by a BlazorBindingsAvalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>



#pragma warning disable CA2252

namespace Blazonia.Components
{
    /// <summary>
    /// Base class for controls that represents controls that can spin.
    /// </summary>
    public abstract partial class Spinner : ContentControl
    {
        static Spinner()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets <see cref="T:Avalonia.Controls.ValidSpinDirections" /> allowed for this control.
        /// </summary>
        [Parameter] public AC.ValidSpinDirections? ValidSpinDirection { get; set; }
        [Parameter] public EventCallback<AC.SpinEventArgs> OnSpin { get; set; }

        public new AC.Spinner NativeControl => (AC.Spinner)((AvaloniaObject)this).NativeControl;


        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(ValidSpinDirection):
                    if (!Equals(ValidSpinDirection, value))
                    {
                        ValidSpinDirection = (AC.ValidSpinDirections?)value;
                        NativeControl.ValidSpinDirection = ValidSpinDirection ?? (AC.ValidSpinDirections)AC.Spinner.ValidSpinDirectionProperty.GetDefaultValue(AC.Spinner.ValidSpinDirectionProperty.OwnerType);
                    }
                    break;
                case nameof(OnSpin):
                    if (!Equals(OnSpin, value))
                    {
                        void NativeControlSpin(object sender, AC.SpinEventArgs e) => InvokeEventCallback(OnSpin, e);

                        OnSpin = (EventCallback<AC.SpinEventArgs>)value;
                        NativeControl.Spin -= NativeControlSpin;
                        NativeControl.Spin += NativeControlSpin;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
