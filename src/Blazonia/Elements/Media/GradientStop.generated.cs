// <auto-generated>
//     This code was generated by a BlazorBindingsAvalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using AM = Avalonia.Media;
using Blazonia.Components;

#pragma warning disable CA2252

namespace Blazonia.Components.Media
{
    /// <summary>
    /// Describes the location and color of a transition point in a gradient.
    /// </summary>
    public partial class GradientStop : Blazonia.Components.AvaloniaObject
    {
        static GradientStop()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public OneOf.OneOf<AM.Color?, string> Color { get; set; }
        [Parameter] public double? Offset { get; set; }

        public new AM.GradientStop NativeControl => (AM.GradientStop)((AvaloniaObject)this).NativeControl;

        protected override AM.GradientStop CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Color):
                    if (!Equals(Color, value))
                    {
                        Color = (OneOf.OneOf<AM.Color?,string>)value;
                        if (Color.IsT0)
                        {
                            NativeControl.Color = (AM.Color)Color.AsT0;
                        }
                        else 
                        {
                            NativeControl.Color = AM.Color.Parse(Color.AsT1);
                        }
                    }
                    break;
                case nameof(Offset):
                    if (!Equals(Offset, value))
                    {
                        Offset = (double?)value;
                        NativeControl.Offset = Offset ?? (double)AM.GradientStop.OffsetProperty.GetDefaultValue(AM.GradientStop.OffsetProperty.OwnerType);
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
