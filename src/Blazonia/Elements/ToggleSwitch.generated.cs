// <auto-generated>
//     This code was generated by a BlazorBindingsAvalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using Microsoft.AspNetCore.Components.Rendering;

#pragma warning disable CA2252

namespace Blazonia.Components
{
    /// <summary>
    /// A Toggle Switch control.
    /// </summary>
    public partial class ToggleSwitch : Blazonia.Components.Primitives.ToggleButton
    {
        static ToggleSwitch()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or Sets the <see cref="T:Avalonia.Animation.Transitions" /> of switching knob.
        /// </summary>
        [Parameter] public global::Avalonia.Animation.Transitions KnobTransitions { get; set; }
        /// <summary>
        /// Gets or Sets the Content that is displayed when in the Off State.
        /// </summary>
        [Parameter] public object OffContent { get; set; }
        /// <summary>
        /// Gets or Sets the Content that is displayed when in the On State.
        /// </summary>
        [Parameter] public object OnContent { get; set; }
        /// <summary>
        /// Gets or Sets the <see cref="T:Avalonia.Controls.Templates.IDataTemplate" /> used to display the <see cref="P:Avalonia.Controls.ToggleSwitch.OffContent" />.
        /// </summary>
        [Parameter] public RenderFragment OffContentTemplate { get; set; }
        /// <summary>
        /// Gets or Sets the <see cref="T:Avalonia.Controls.Templates.IDataTemplate" /> used to display the <see cref="P:Avalonia.Controls.ToggleSwitch.OnContent" />.
        /// </summary>
        [Parameter] public RenderFragment OnContentTemplate { get; set; }

        public new AC.ToggleSwitch NativeControl => (AC.ToggleSwitch)((AvaloniaObject)this).NativeControl;

        protected override AC.ToggleSwitch CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(KnobTransitions):
                    if (!Equals(KnobTransitions, value))
                    {
                        KnobTransitions = (global::Avalonia.Animation.Transitions)value;
                        NativeControl.KnobTransitions = KnobTransitions;
                    }
                    break;
                case nameof(OffContent):
                    if (!Equals(OffContent, value))
                    {
                        OffContent = (object)value;
                        NativeControl.OffContent = OffContent;
                    }
                    break;
                case nameof(OnContent):
                    if (!Equals(OnContent, value))
                    {
                        OnContent = (object)value;
                        NativeControl.OnContent = OnContent;
                    }
                    break;
                case nameof(OffContentTemplate):
                    OffContentTemplate = (RenderFragment)value;
                    break;
                case nameof(OnContentTemplate):
                    OnContentTemplate = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddDataTemplateProperty<AC.ToggleSwitch>(builder, sequence++, OffContentTemplate,
                (nativeControl, nativeTemplate) => nativeControl.OffContentTemplate = nativeTemplate);
            RenderTreeBuilderHelper.AddDataTemplateProperty<AC.ToggleSwitch>(builder, sequence++, OnContentTemplate,
                (nativeControl, nativeTemplate) => nativeControl.OnContentTemplate = nativeTemplate);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
