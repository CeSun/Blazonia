// <auto-generated>
//     This code was generated by a BlazorBindingsAvalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using AI = Avalonia.Input;
using Blazonia.Components;

#pragma warning disable CA2252

namespace Blazonia.Components.Input
{
    /// <summary>
    /// Implements input-related functionality for a control.
    /// </summary>
    public partial class InputElement : Blazonia.Components.Interactivity.Interactive
    {
        static InputElement()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets associated mouse cursor.
        /// </summary>
        [Parameter] public OneOf.OneOf<AI.Cursor, string> Cursor { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the control can receive focus.
        /// </summary>
        [Parameter] public bool? Focusable { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the control is enabled for user interaction.
        /// </summary>
        [Parameter] public bool? IsEnabled { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the control is considered for hit testing.
        /// </summary>
        [Parameter] public bool? IsHitTestVisible { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates whether the control is included in tab navigation.
        /// </summary>
        [Parameter] public bool? IsTabStop { get; set; }
        /// <summary>
        /// Gets or sets a value that determines the order in which elements receive focus when the user navigates through controls by pressing the Tab key.
        /// </summary>
        [Parameter] public int? TabIndex { get; set; }
        [Parameter] public EventCallback<AI.GotFocusEventArgs> OnGotFocus { get; set; }
        [Parameter] public EventCallback<global::Avalonia.Interactivity.RoutedEventArgs> OnLostFocus { get; set; }
        [Parameter] public EventCallback<AI.KeyEventArgs> OnKeyDown { get; set; }
        [Parameter] public EventCallback<AI.KeyEventArgs> OnKeyUp { get; set; }
        [Parameter] public EventCallback<AI.TextInputEventArgs> OnTextInput { get; set; }
        [Parameter] public EventCallback<AI.TextInput.TextInputMethodClientRequestedEventArgs> OnTextInputMethodClientRequested { get; set; }
        [Parameter] public EventCallback<AI.PointerEventArgs> OnPointerEntered { get; set; }
        [Parameter] public EventCallback<AI.PointerEventArgs> OnPointerExited { get; set; }
        [Parameter] public EventCallback<AI.PointerEventArgs> OnPointerMoved { get; set; }
        [Parameter] public EventCallback<AI.PointerPressedEventArgs> OnPointerPressed { get; set; }
        [Parameter] public EventCallback<AI.PointerReleasedEventArgs> OnPointerReleased { get; set; }
        [Parameter] public EventCallback<AI.PointerCaptureLostEventArgs> OnPointerCaptureLost { get; set; }
        [Parameter] public EventCallback<AI.PointerWheelEventArgs> OnPointerWheelChanged { get; set; }
        [Parameter] public EventCallback<AI.TappedEventArgs> OnTapped { get; set; }
        [Parameter] public EventCallback<AI.HoldingRoutedEventArgs> OnHolding { get; set; }
        [Parameter] public EventCallback<AI.TappedEventArgs> OnDoubleTapped { get; set; }

        public new AI.InputElement NativeControl => (AI.InputElement)((AvaloniaObject)this).NativeControl;

        protected override AI.InputElement CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Cursor):
                    if (!Equals(Cursor, value))
                    {
                        Cursor = (OneOf.OneOf<AI.Cursor,string>)value;
                        if (Cursor.IsT0)
                        {
                            NativeControl.Cursor = (AI.Cursor)Cursor.AsT0;
                        }
                        else 
                        {
                            NativeControl.Cursor = AI.Cursor.Parse(Cursor.AsT1);
                        }
                    }
                    break;
                case nameof(Focusable):
                    if (!Equals(Focusable, value))
                    {
                        Focusable = (bool?)value;
                        NativeControl.Focusable = Focusable ?? (bool)AI.InputElement.FocusableProperty.GetDefaultValue(AI.InputElement.FocusableProperty.OwnerType);
                    }
                    break;
                case nameof(IsEnabled):
                    if (!Equals(IsEnabled, value))
                    {
                        IsEnabled = (bool?)value;
                        NativeControl.IsEnabled = IsEnabled ?? (bool)AI.InputElement.IsEnabledProperty.GetDefaultValue(AI.InputElement.IsEnabledProperty.OwnerType);
                    }
                    break;
                case nameof(IsHitTestVisible):
                    if (!Equals(IsHitTestVisible, value))
                    {
                        IsHitTestVisible = (bool?)value;
                        NativeControl.IsHitTestVisible = IsHitTestVisible ?? (bool)AI.InputElement.IsHitTestVisibleProperty.GetDefaultValue(AI.InputElement.IsHitTestVisibleProperty.OwnerType);
                    }
                    break;
                case nameof(IsTabStop):
                    if (!Equals(IsTabStop, value))
                    {
                        IsTabStop = (bool?)value;
                        NativeControl.IsTabStop = IsTabStop ?? (bool)AI.InputElement.IsTabStopProperty.GetDefaultValue(AI.InputElement.IsTabStopProperty.OwnerType);
                    }
                    break;
                case nameof(TabIndex):
                    if (!Equals(TabIndex, value))
                    {
                        TabIndex = (int?)value;
                        NativeControl.TabIndex = TabIndex ?? (int)AI.InputElement.TabIndexProperty.GetDefaultValue(AI.InputElement.TabIndexProperty.OwnerType);
                    }
                    break;
                case nameof(OnGotFocus):
                    if (!Equals(OnGotFocus, value))
                    {
                        void NativeControlGotFocus(object sender, AI.GotFocusEventArgs e) => InvokeEventCallback(OnGotFocus, e);

                        OnGotFocus = (EventCallback<AI.GotFocusEventArgs>)value;
                        NativeControl.GotFocus -= NativeControlGotFocus;
                        NativeControl.GotFocus += NativeControlGotFocus;
                    }
                    break;
                case nameof(OnLostFocus):
                    if (!Equals(OnLostFocus, value))
                    {
                        void NativeControlLostFocus(object sender, global::Avalonia.Interactivity.RoutedEventArgs e) => InvokeEventCallback(OnLostFocus, e);

                        OnLostFocus = (EventCallback<global::Avalonia.Interactivity.RoutedEventArgs>)value;
                        NativeControl.LostFocus -= NativeControlLostFocus;
                        NativeControl.LostFocus += NativeControlLostFocus;
                    }
                    break;
                case nameof(OnKeyDown):
                    if (!Equals(OnKeyDown, value))
                    {
                        void NativeControlKeyDown(object sender, AI.KeyEventArgs e) => InvokeEventCallback(OnKeyDown, e);

                        OnKeyDown = (EventCallback<AI.KeyEventArgs>)value;
                        NativeControl.KeyDown -= NativeControlKeyDown;
                        NativeControl.KeyDown += NativeControlKeyDown;
                    }
                    break;
                case nameof(OnKeyUp):
                    if (!Equals(OnKeyUp, value))
                    {
                        void NativeControlKeyUp(object sender, AI.KeyEventArgs e) => InvokeEventCallback(OnKeyUp, e);

                        OnKeyUp = (EventCallback<AI.KeyEventArgs>)value;
                        NativeControl.KeyUp -= NativeControlKeyUp;
                        NativeControl.KeyUp += NativeControlKeyUp;
                    }
                    break;
                case nameof(OnTextInput):
                    if (!Equals(OnTextInput, value))
                    {
                        void NativeControlTextInput(object sender, AI.TextInputEventArgs e) => InvokeEventCallback(OnTextInput, e);

                        OnTextInput = (EventCallback<AI.TextInputEventArgs>)value;
                        NativeControl.TextInput -= NativeControlTextInput;
                        NativeControl.TextInput += NativeControlTextInput;
                    }
                    break;
                case nameof(OnTextInputMethodClientRequested):
                    if (!Equals(OnTextInputMethodClientRequested, value))
                    {
                        void NativeControlTextInputMethodClientRequested(object sender, AI.TextInput.TextInputMethodClientRequestedEventArgs e) => InvokeEventCallback(OnTextInputMethodClientRequested, e);

                        OnTextInputMethodClientRequested = (EventCallback<AI.TextInput.TextInputMethodClientRequestedEventArgs>)value;
                        NativeControl.TextInputMethodClientRequested -= NativeControlTextInputMethodClientRequested;
                        NativeControl.TextInputMethodClientRequested += NativeControlTextInputMethodClientRequested;
                    }
                    break;
                case nameof(OnPointerEntered):
                    if (!Equals(OnPointerEntered, value))
                    {
                        void NativeControlPointerEntered(object sender, AI.PointerEventArgs e) => InvokeEventCallback(OnPointerEntered, e);

                        OnPointerEntered = (EventCallback<AI.PointerEventArgs>)value;
                        NativeControl.PointerEntered -= NativeControlPointerEntered;
                        NativeControl.PointerEntered += NativeControlPointerEntered;
                    }
                    break;
                case nameof(OnPointerExited):
                    if (!Equals(OnPointerExited, value))
                    {
                        void NativeControlPointerExited(object sender, AI.PointerEventArgs e) => InvokeEventCallback(OnPointerExited, e);

                        OnPointerExited = (EventCallback<AI.PointerEventArgs>)value;
                        NativeControl.PointerExited -= NativeControlPointerExited;
                        NativeControl.PointerExited += NativeControlPointerExited;
                    }
                    break;
                case nameof(OnPointerMoved):
                    if (!Equals(OnPointerMoved, value))
                    {
                        void NativeControlPointerMoved(object sender, AI.PointerEventArgs e) => InvokeEventCallback(OnPointerMoved, e);

                        OnPointerMoved = (EventCallback<AI.PointerEventArgs>)value;
                        NativeControl.PointerMoved -= NativeControlPointerMoved;
                        NativeControl.PointerMoved += NativeControlPointerMoved;
                    }
                    break;
                case nameof(OnPointerPressed):
                    if (!Equals(OnPointerPressed, value))
                    {
                        void NativeControlPointerPressed(object sender, AI.PointerPressedEventArgs e) => InvokeEventCallback(OnPointerPressed, e);

                        OnPointerPressed = (EventCallback<AI.PointerPressedEventArgs>)value;
                        NativeControl.PointerPressed -= NativeControlPointerPressed;
                        NativeControl.PointerPressed += NativeControlPointerPressed;
                    }
                    break;
                case nameof(OnPointerReleased):
                    if (!Equals(OnPointerReleased, value))
                    {
                        void NativeControlPointerReleased(object sender, AI.PointerReleasedEventArgs e) => InvokeEventCallback(OnPointerReleased, e);

                        OnPointerReleased = (EventCallback<AI.PointerReleasedEventArgs>)value;
                        NativeControl.PointerReleased -= NativeControlPointerReleased;
                        NativeControl.PointerReleased += NativeControlPointerReleased;
                    }
                    break;
                case nameof(OnPointerCaptureLost):
                    if (!Equals(OnPointerCaptureLost, value))
                    {
                        void NativeControlPointerCaptureLost(object sender, AI.PointerCaptureLostEventArgs e) => InvokeEventCallback(OnPointerCaptureLost, e);

                        OnPointerCaptureLost = (EventCallback<AI.PointerCaptureLostEventArgs>)value;
                        NativeControl.PointerCaptureLost -= NativeControlPointerCaptureLost;
                        NativeControl.PointerCaptureLost += NativeControlPointerCaptureLost;
                    }
                    break;
                case nameof(OnPointerWheelChanged):
                    if (!Equals(OnPointerWheelChanged, value))
                    {
                        void NativeControlPointerWheelChanged(object sender, AI.PointerWheelEventArgs e) => InvokeEventCallback(OnPointerWheelChanged, e);

                        OnPointerWheelChanged = (EventCallback<AI.PointerWheelEventArgs>)value;
                        NativeControl.PointerWheelChanged -= NativeControlPointerWheelChanged;
                        NativeControl.PointerWheelChanged += NativeControlPointerWheelChanged;
                    }
                    break;
                case nameof(OnTapped):
                    if (!Equals(OnTapped, value))
                    {
                        void NativeControlTapped(object sender, AI.TappedEventArgs e) => InvokeEventCallback(OnTapped, e);

                        OnTapped = (EventCallback<AI.TappedEventArgs>)value;
                        NativeControl.Tapped -= NativeControlTapped;
                        NativeControl.Tapped += NativeControlTapped;
                    }
                    break;
                case nameof(OnHolding):
                    if (!Equals(OnHolding, value))
                    {
                        void NativeControlHolding(object sender, AI.HoldingRoutedEventArgs e) => InvokeEventCallback(OnHolding, e);

                        OnHolding = (EventCallback<AI.HoldingRoutedEventArgs>)value;
                        NativeControl.Holding -= NativeControlHolding;
                        NativeControl.Holding += NativeControlHolding;
                    }
                    break;
                case nameof(OnDoubleTapped):
                    if (!Equals(OnDoubleTapped, value))
                    {
                        void NativeControlDoubleTapped(object sender, AI.TappedEventArgs e) => InvokeEventCallback(OnDoubleTapped, e);

                        OnDoubleTapped = (EventCallback<AI.TappedEventArgs>)value;
                        NativeControl.DoubleTapped -= NativeControlDoubleTapped;
                        NativeControl.DoubleTapped += NativeControlDoubleTapped;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
