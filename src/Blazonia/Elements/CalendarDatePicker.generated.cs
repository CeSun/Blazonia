// <auto-generated>
//     This code was generated by a BlazorBindingsAvalonia component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>



#pragma warning disable CA2252

namespace Blazonia.Components
{
    /// <summary>
    /// A date selection control that allows the user to select dates from a drop down calendar.
    /// </summary>
    public partial class CalendarDatePicker : Blazonia.Components.Primitives.TemplatedControl
    {
        static CalendarDatePicker()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public string CustomDateFormatString { get; set; }
        /// <summary>
        /// Gets or sets the date to display.
        /// </summary>
        /// <value>
        /// The date to display. The default is <see cref="P:System.DateTime.Today" />.
        /// </value>
        [Parameter] public DateTime? DisplayDate { get; set; }
        /// <summary>
        /// Gets or sets the last date to be displayed.
        /// </summary>
        /// <value>
        /// The last date to display.
        /// </value>
        [Parameter] public Nullable<DateTime> DisplayDateEnd { get; set; }
        /// <summary>
        /// Gets or sets the first date to be displayed.
        /// </summary>
        /// <value>
        /// The first date to display.
        /// </value>
        [Parameter] public Nullable<DateTime> DisplayDateStart { get; set; }
        /// <summary>
        /// Gets or sets the day that is considered the beginning of the week.
        /// </summary>
        /// <value>
        /// A <see cref="T:System.DayOfWeek" /> representing the beginning of the week. The default is <see cref="F:System.DayOfWeek.Sunday" />.
        /// </value>
        [Parameter] public DayOfWeek? FirstDayOfWeek { get; set; }
        /// <summary>
        /// Gets or sets the horizontal alignment of the content within the control.
        /// </summary>
        [Parameter] public global::Avalonia.Layout.HorizontalAlignment? HorizontalContentAlignment { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the drop-down <see cref="T:Avalonia.Controls.Calendar" /> is open or closed.
        /// </summary>
        /// <value>
        /// True if the <see cref="T:Avalonia.Controls.Calendar" /> is open; otherwise, false. The default is false.
        /// </value>
        [Parameter] public bool? IsDropDownOpen { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the current date will be highlighted.
        /// </summary>
        /// <value>
        /// True if the current date is highlighted; otherwise, false. The default is true.
        /// </value>
        [Parameter] public bool? IsTodayHighlighted { get; set; }
        /// <summary>
        /// Gets or sets the currently selected date.
        /// </summary>
        /// <value>
        /// The date currently selected. The default is null.
        /// </value>
        [Parameter] public Nullable<DateTime> SelectedDate { get; set; }
        /// <summary>
        /// Gets or sets the format that is used to display the selected date.
        /// </summary>
        /// <value>
        /// The format that is used to display the selected date. The default is <see cref="F:Avalonia.Controls.CalendarDatePickerFormat.Short" />.
        /// </value>
        [Parameter] public AC.CalendarDatePickerFormat? SelectedDateFormat { get; set; }
        /// <summary>
        /// Gets or sets the text that is displayed by the <see cref="T:Avalonia.Controls.CalendarDatePicker" />.
        /// </summary>
        /// <value>
        /// The text displayed by the <see cref="T:Avalonia.Controls.CalendarDatePicker" />.
        /// </value>
        [Parameter] public string Text { get; set; }
        [Parameter] public bool? UseFloatingWatermark { get; set; }
        /// <summary>
        /// Gets or sets the vertical alignment of the content within the control.
        /// </summary>
        [Parameter] public global::Avalonia.Layout.VerticalAlignment? VerticalContentAlignment { get; set; }
        [Parameter] public string Watermark { get; set; }
        [Parameter] public EventCallback OnCalendarClosed { get; set; }
        [Parameter] public EventCallback OnCalendarOpened { get; set; }
        [Parameter] public EventCallback<AC.CalendarDatePickerDateValidationErrorEventArgs> OnDateValidationError { get; set; }
        [Parameter] public EventCallback<Nullable<DateTime>> SelectedDateChanged { get; set; }

        public new AC.CalendarDatePicker NativeControl => (AC.CalendarDatePicker)((AvaloniaObject)this).NativeControl;

        protected override AvaloniaBindableObject CreateNativeElement() => new AC.CalendarDatePicker();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(CustomDateFormatString):
                    if (!Equals(CustomDateFormatString, value))
                    {
                        CustomDateFormatString = (string)value;
                        NativeControl.CustomDateFormatString = CustomDateFormatString;
                    }
                    break;
                case nameof(DisplayDate):
                    if (!Equals(DisplayDate, value))
                    {
                        DisplayDate = (DateTime?)value;
                        NativeControl.DisplayDate = DisplayDate ?? (DateTime)AC.CalendarDatePicker.DisplayDateProperty.GetDefaultValue(AC.CalendarDatePicker.DisplayDateProperty.OwnerType);
                    }
                    break;
                case nameof(DisplayDateEnd):
                    if (!Equals(DisplayDateEnd, value))
                    {
                        DisplayDateEnd = (Nullable<DateTime>)value;
                        NativeControl.DisplayDateEnd = DisplayDateEnd;
                    }
                    break;
                case nameof(DisplayDateStart):
                    if (!Equals(DisplayDateStart, value))
                    {
                        DisplayDateStart = (Nullable<DateTime>)value;
                        NativeControl.DisplayDateStart = DisplayDateStart;
                    }
                    break;
                case nameof(FirstDayOfWeek):
                    if (!Equals(FirstDayOfWeek, value))
                    {
                        FirstDayOfWeek = (DayOfWeek?)value;
                        NativeControl.FirstDayOfWeek = FirstDayOfWeek ?? (DayOfWeek)AC.CalendarDatePicker.FirstDayOfWeekProperty.GetDefaultValue(AC.CalendarDatePicker.FirstDayOfWeekProperty.OwnerType);
                    }
                    break;
                case nameof(HorizontalContentAlignment):
                    if (!Equals(HorizontalContentAlignment, value))
                    {
                        HorizontalContentAlignment = (global::Avalonia.Layout.HorizontalAlignment?)value;
                        NativeControl.HorizontalContentAlignment = HorizontalContentAlignment ?? (global::Avalonia.Layout.HorizontalAlignment)AC.CalendarDatePicker.HorizontalContentAlignmentProperty.GetDefaultValue(AC.CalendarDatePicker.HorizontalContentAlignmentProperty.OwnerType);
                    }
                    break;
                case nameof(IsDropDownOpen):
                    if (!Equals(IsDropDownOpen, value))
                    {
                        IsDropDownOpen = (bool?)value;
                        NativeControl.IsDropDownOpen = IsDropDownOpen ?? (bool)AC.CalendarDatePicker.IsDropDownOpenProperty.GetDefaultValue(AC.CalendarDatePicker.IsDropDownOpenProperty.OwnerType);
                    }
                    break;
                case nameof(IsTodayHighlighted):
                    if (!Equals(IsTodayHighlighted, value))
                    {
                        IsTodayHighlighted = (bool?)value;
                        NativeControl.IsTodayHighlighted = IsTodayHighlighted ?? (bool)AC.CalendarDatePicker.IsTodayHighlightedProperty.GetDefaultValue(AC.CalendarDatePicker.IsTodayHighlightedProperty.OwnerType);
                    }
                    break;
                case nameof(SelectedDate):
                    if (!Equals(SelectedDate, value))
                    {
                        SelectedDate = (Nullable<DateTime>)value;
                        NativeControl.SelectedDate = SelectedDate;
                    }
                    break;
                case nameof(SelectedDateFormat):
                    if (!Equals(SelectedDateFormat, value))
                    {
                        SelectedDateFormat = (AC.CalendarDatePickerFormat?)value;
                        NativeControl.SelectedDateFormat = SelectedDateFormat ?? (AC.CalendarDatePickerFormat)AC.CalendarDatePicker.SelectedDateFormatProperty.GetDefaultValue(AC.CalendarDatePicker.SelectedDateFormatProperty.OwnerType);
                    }
                    break;
                case nameof(Text):
                    if (!Equals(Text, value))
                    {
                        Text = (string)value;
                        NativeControl.Text = Text;
                    }
                    break;
                case nameof(UseFloatingWatermark):
                    if (!Equals(UseFloatingWatermark, value))
                    {
                        UseFloatingWatermark = (bool?)value;
                        NativeControl.UseFloatingWatermark = UseFloatingWatermark ?? (bool)AC.CalendarDatePicker.UseFloatingWatermarkProperty.GetDefaultValue(AC.CalendarDatePicker.UseFloatingWatermarkProperty.OwnerType);
                    }
                    break;
                case nameof(VerticalContentAlignment):
                    if (!Equals(VerticalContentAlignment, value))
                    {
                        VerticalContentAlignment = (global::Avalonia.Layout.VerticalAlignment?)value;
                        NativeControl.VerticalContentAlignment = VerticalContentAlignment ?? (global::Avalonia.Layout.VerticalAlignment)AC.CalendarDatePicker.VerticalContentAlignmentProperty.GetDefaultValue(AC.CalendarDatePicker.VerticalContentAlignmentProperty.OwnerType);
                    }
                    break;
                case nameof(Watermark):
                    if (!Equals(Watermark, value))
                    {
                        Watermark = (string)value;
                        NativeControl.Watermark = Watermark;
                    }
                    break;
                case nameof(OnCalendarClosed):
                    if (!Equals(OnCalendarClosed, value))
                    {
                        void NativeControlCalendarClosed(object sender, EventArgs e) => InvokeEventCallback(OnCalendarClosed);

                        OnCalendarClosed = (EventCallback)value;
                        NativeControl.CalendarClosed -= NativeControlCalendarClosed;
                        NativeControl.CalendarClosed += NativeControlCalendarClosed;
                    }
                    break;
                case nameof(OnCalendarOpened):
                    if (!Equals(OnCalendarOpened, value))
                    {
                        void NativeControlCalendarOpened(object sender, EventArgs e) => InvokeEventCallback(OnCalendarOpened);

                        OnCalendarOpened = (EventCallback)value;
                        NativeControl.CalendarOpened -= NativeControlCalendarOpened;
                        NativeControl.CalendarOpened += NativeControlCalendarOpened;
                    }
                    break;
                case nameof(OnDateValidationError):
                    if (!Equals(OnDateValidationError, value))
                    {
                        void NativeControlDateValidationError(object sender, AC.CalendarDatePickerDateValidationErrorEventArgs e) => InvokeEventCallback(OnDateValidationError, e);

                        OnDateValidationError = (EventCallback<AC.CalendarDatePickerDateValidationErrorEventArgs>)value;
                        NativeControl.DateValidationError -= NativeControlDateValidationError;
                        NativeControl.DateValidationError += NativeControlDateValidationError;
                    }
                    break;
                case nameof(SelectedDateChanged):
                    if (!Equals(SelectedDateChanged, value))
                    {
                        void NativeControlSelectedDateChanged(object sender, AC.SelectionChangedEventArgs e)
                        {
                            var value = NativeControl.SelectedDate;
                            SelectedDate = value;
                            InvokeEventCallback(SelectedDateChanged, value);
                        }

                        SelectedDateChanged = (EventCallback<Nullable<DateTime>>)value;
                        NativeControl.SelectedDateChanged -= NativeControlSelectedDateChanged;
                        NativeControl.SelectedDateChanged += NativeControlSelectedDateChanged;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
