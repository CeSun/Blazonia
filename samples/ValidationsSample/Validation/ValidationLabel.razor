@using System.Linq.Expressions

@typeparam TValue
@implements IDisposable

@foreach (var message in CascadedEditContext.GetValidationMessages(_fieldIdentifier))
{
    <Label StyleClass="validation-message"
           Text="@message"
           FontSize="@FontSize"
           TextColor="TextColor" />
}

@code {
    readonly EventHandler<ValidationStateChangedEventArgs> _validationStateChangedHandler;
    FieldIdentifier _fieldIdentifier;

    [CascadingParameter] EditContext CascadedEditContext { get; set; }

    [Parameter] public Expression<Func<TValue>> For { get; set; }
    [Parameter] public string FieldName { get; set; }
    [Parameter] public double? FontSize { get; set; }
    [Parameter] public Color TextColor { get; set; } = Colors.Red;

    public ValidationLabel()
    {
        _validationStateChangedHandler = (_, _) => StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _fieldIdentifier = For != null ? FieldIdentifier.Create(For) : CascadedEditContext.Field(FieldName);
        CascadedEditContext.OnValidationStateChanged += _validationStateChangedHandler;
    }

    void IDisposable.Dispose()
    {
        CascadedEditContext.OnValidationStateChanged -= _validationStateChangedHandler;
    }
}
