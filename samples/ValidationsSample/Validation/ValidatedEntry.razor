<StackLayout Spacing="1">

	<Entry @bind-Text="@CurrentText"
		   TextColor="@EntryTextColor"
		   IsPassword="@IsPassword"
		   Placeholder="@Placeholder"
		   OnUnfocused="OnUnfocused"
		   ReturnType="ReturnType"
		   Keyboard="Keyboard"
		   OnCompleted="OnCompleted" />

	<ValidationLabel For="@TextExpression" TextColor="Colors.Red" />
</StackLayout>

@code {
	private FieldIdentifier _fieldIdentifier;
	[CascadingParameter] EditContext CascadedEditContext { get; set; }

	[Parameter] public string Text { get; set; }
	[Parameter] public EventCallback<string> TextChanged { get; set; }
	[Parameter] public Expression<Func<string>> TextExpression { get; set; }
	[Parameter] public bool? IsPassword { get; set; }
	[Parameter] public string Placeholder { get; set; }
	[Parameter] public ReturnType? ReturnType { get; set; }
	[Parameter] public Keyboard Keyboard { get; set; }
	[Parameter] public EventCallback OnCompleted { get; set; }

	bool IsValid => !CascadedEditContext.GetValidationMessages(_fieldIdentifier).Any();
	Color EntryTextColor => IsValid ? null : Colors.Red;

	protected string CurrentText
	{
		get => Text;
		set
		{
			if (Text != value)
			{
				Text = value;
				_ = TextChanged.InvokeAsync(value);

				// Reflect changes immedietely only if field already has validation errors
				if (!IsValid)
				{
					CascadedEditContext.NotifyFieldChanged(_fieldIdentifier);
				}
			}
		}
	}

	void OnUnfocused()
	{
		if (CurrentText?.Length > 0)
		{
			CascadedEditContext.NotifyFieldChanged(_fieldIdentifier);
		}
	}

	protected override void OnInitialized()
	{
		_fieldIdentifier = FieldIdentifier.Create(TextExpression);
	}
}
