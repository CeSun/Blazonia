// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using MCM = Material.Components.Maui;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using SkiaSharp.Views.Maui;
using System.Threading.Tasks;

#pragma warning disable CA2252

namespace BlazorBindings.Maui.Elements.Material.Components
{
    public partial class SKTouchCanvasView : BlazorBindings.Maui.Elements.SkiaSharp.SKCanvasView
    {
        static SKTouchCanvasView()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public RenderFragment ContextMenu { get; set; }
        [Parameter] public EventCallback<SKTouchEventArgs> OnPress { get; set; }
        [Parameter] public EventCallback<SKTouchEventArgs> OnMoved { get; set; }
        [Parameter] public EventCallback<SKTouchEventArgs> OnRelease { get; set; }
        [Parameter] public EventCallback<SKTouchEventArgs> OnLongPressed { get; set; }
        [Parameter] public EventCallback<SKTouchEventArgs> OnClick { get; set; }
        [Parameter] public EventCallback<SKTouchEventArgs> OnEntered { get; set; }
        [Parameter] public EventCallback<SKTouchEventArgs> OnExited { get; set; }

        public new MCM.SKTouchCanvasView NativeControl => (MCM.SKTouchCanvasView)((BindableObject)this).NativeControl;

        protected override MCM.SKTouchCanvasView CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(ContextMenu):
                    ContextMenu = (RenderFragment)value;
                    break;
                case nameof(OnPress):
                    if (!Equals(OnPress, value))
                    {
                        void NativeControlPressed(object sender, SKTouchEventArgs e) => InvokeEventCallback(OnPress, e);

                        OnPress = (EventCallback<SKTouchEventArgs>)value;
                        NativeControl.Pressed -= NativeControlPressed;
                        NativeControl.Pressed += NativeControlPressed;
                    }
                    break;
                case nameof(OnMoved):
                    if (!Equals(OnMoved, value))
                    {
                        void NativeControlMoved(object sender, SKTouchEventArgs e) => InvokeEventCallback(OnMoved, e);

                        OnMoved = (EventCallback<SKTouchEventArgs>)value;
                        NativeControl.Moved -= NativeControlMoved;
                        NativeControl.Moved += NativeControlMoved;
                    }
                    break;
                case nameof(OnRelease):
                    if (!Equals(OnRelease, value))
                    {
                        void NativeControlReleased(object sender, SKTouchEventArgs e) => InvokeEventCallback(OnRelease, e);

                        OnRelease = (EventCallback<SKTouchEventArgs>)value;
                        NativeControl.Released -= NativeControlReleased;
                        NativeControl.Released += NativeControlReleased;
                    }
                    break;
                case nameof(OnLongPressed):
                    if (!Equals(OnLongPressed, value))
                    {
                        void NativeControlLongPressed(object sender, SKTouchEventArgs e) => InvokeEventCallback(OnLongPressed, e);

                        OnLongPressed = (EventCallback<SKTouchEventArgs>)value;
                        NativeControl.LongPressed -= NativeControlLongPressed;
                        NativeControl.LongPressed += NativeControlLongPressed;
                    }
                    break;
                case nameof(OnClick):
                    if (!Equals(OnClick, value))
                    {
                        void NativeControlClicked(object sender, SKTouchEventArgs e) => InvokeEventCallback(OnClick, e);

                        OnClick = (EventCallback<SKTouchEventArgs>)value;
                        NativeControl.Clicked -= NativeControlClicked;
                        NativeControl.Clicked += NativeControlClicked;
                    }
                    break;
                case nameof(OnEntered):
                    if (!Equals(OnEntered, value))
                    {
                        void NativeControlEntered(object sender, SKTouchEventArgs e) => InvokeEventCallback(OnEntered, e);

                        OnEntered = (EventCallback<SKTouchEventArgs>)value;
                        NativeControl.Entered -= NativeControlEntered;
                        NativeControl.Entered += NativeControlEntered;
                    }
                    break;
                case nameof(OnExited):
                    if (!Equals(OnExited, value))
                    {
                        void NativeControlExited(object sender, SKTouchEventArgs e) => InvokeEventCallback(OnExited, e);

                        OnExited = (EventCallback<SKTouchEventArgs>)value;
                        NativeControl.Exited -= NativeControlExited;
                        NativeControl.Exited += NativeControlExited;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<MCM.SKTouchCanvasView>(builder, sequence++, ContextMenu, (x, value) => x.ContextMenu = (MCM.ContextMenu)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
